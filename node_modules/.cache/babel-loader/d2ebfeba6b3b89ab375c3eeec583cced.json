{"remainingRequest":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\src\\views\\arrange\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\src\\views\\arrange\\index.vue","mtime":1590592273159},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"C:/Users/DUONG/Desktop/managetimetable_webapp/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"C:/Users/DUONG/Desktop/managetimetable_webapp/node_modules/@babel/runtime/helpers/asyncToGenerator\"));\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es7.array.includes\");\n\nrequire(\"core-js/modules/es6.string.includes\");\n\nvar _defineProperty2 = _interopRequireDefault(require(\"C:/Users/DUONG/Desktop/managetimetable_webapp/node_modules/@babel/runtime/helpers/defineProperty\"));\n\nvar _TableCustom = _interopRequireDefault(require(\"@/components/TableCustom\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'Arrange',\n  components: {\n    TableCustom: _TableCustom.default\n  },\n  data: function data() {\n    var _ref;\n\n    return _ref = {\n      slot: ['M1', 'M2', 'M3', 'E1', 'E2', 'E3', 'M4', 'M5', 'E4', 'E5'],\n      loading: true,\n      optionId: '',\n      listYear: [],\n      listSlot: [],\n      dataDetail: {},\n      dataListRoom: [],\n      dataListClass: [],\n      dataListLecturer: [],\n      dataListSubject: [],\n      modelRoom: '',\n      valueTeacher: [],\n      valueClass: [],\n      valueRoom: [],\n      valueSubject: [],\n      modelClass: '',\n      modelLecturer: '',\n      modelSubject: '',\n      isEdit: false,\n      dataListTeacherDetail: [],\n      // dataListClassDetail: [],\n      listTeacherConfirm: [],\n      groupBy: 'lecturer',\n      dataSwap: [],\n      isSwap: false,\n      listId: [],\n      lecturerForSwap: [],\n      roomForSwap: [],\n      idTimetableSwap: '',\n      listStatus: [{\n        'label': 'FINAL',\n        'value': 'FINAL'\n      }, {\n        'label': 'PUBLIC',\n        'value': 'PUBLIC'\n      }, {\n        'label': 'REJECT',\n        'value': 'REJECT'\n      }, {\n        'label': 'DRAFT',\n        'value': 'DRAFT'\n      }],\n      valueStatus: '',\n      listSlotExpectedView: [],\n      listSubjectExpectedView: [],\n      listSlotExpectedViewTemp: [],\n      listSubjectExpectedViewTemp: []\n    }, (0, _defineProperty2.default)(_ref, \"dataListSubject\", []), (0, _defineProperty2.default)(_ref, \"yearSelected\", []), (0, _defineProperty2.default)(_ref, \"dialogViewAll\", false), (0, _defineProperty2.default)(_ref, \"lecturerExpected\", []), (0, _defineProperty2.default)(_ref, \"listLecturerExpected\", []), (0, _defineProperty2.default)(_ref, \"listFull\", []), _ref;\n  },\n  watch: {\n    lecturerExpected: function lecturerExpected() {\n      var _this = this;\n\n      this.listSlotExpectedView = this.listSlotExpectedViewTemp.filter(function (item) {\n        if (_this.lecturerExpected.length === 0) {\n          return true;\n        } else {\n          return _this.lecturerExpected.includes(item.lecturerName);\n        }\n      });\n      this.listSubjectExpectedView = this.listSubjectExpectedViewTemp.filter(function (item) {\n        if (_this.lecturerExpected.length === 0) {\n          return true;\n        } else {\n          return _this.lecturerExpected.includes(item.lecturerName);\n        }\n      });\n    },\n    groupBy: function groupBy() {\n      this.getDataListSlot();\n    },\n    valueTeacher: function valueTeacher() {\n      var _this2 = this;\n\n      // eslint-disable-next-line no-unused-vars\n      var heightHeader = document.querySelector('.arrange-header').offsetWidth;\n      this.listTeacherConfirm = this.dataListLecturer.filter(function (item) {\n        return _this2.valueTeacher.includes(item.shortName);\n      });\n    },\n    optionId: function optionId() {\n      var _this3 = this;\n\n      this.yearSelected = this.listYear.filter(function (i) {\n        return i.id === _this3.optionId;\n      });\n\n      if (!this.yearSelected[0].hasData) {\n        return;\n      } // eslint-disable-next-line no-sequences\n\n\n      this.lecturerExpected = [], this.getDataListSubject();\n      this.getDataListRoom();\n      this.getDataListClass();\n      this.getDataListLecturer();\n      this.getDataListSlot();\n      this.getListSlotExpForView();\n      this.getListSubjectExpForView();\n    }\n  },\n  created: function created() {\n    this.infoUser = JSON.parse(localStorage.getItem('infoUser'));\n    this.getYear();\n  },\n  methods: {\n    getYear: function getYear() {\n      var _this4 = this;\n\n      this.loading = true;\n      this.$store.dispatch('expected/getListYear').then(function (data) {\n        _this4.listYear = _this4.$store.state.expected.listYear;\n\n        _this4.listYear.forEach(function (element) {\n          if (element.now) {\n            _this4.optionId = element.id;\n          }\n        });\n\n        _this4.yearSelected = _this4.listYear.filter(function (i) {\n          return i.id === _this4.optionId;\n        });\n\n        if (!_this4.yearSelected[0].hasData) {\n          return;\n        }\n\n        _this4.getDataListLecturer();\n\n        _this4.getDataListSlot();\n\n        _this4.getDataListSubject();\n\n        _this4.getDataListRoom();\n\n        _this4.getDataListClass();\n\n        _this4.getListSlotExpForView();\n\n        _this4.getListSubjectExpForView();\n      }).catch(function () {\n        _this4.loading = false;\n      });\n    },\n    getDataListSubject: function getDataListSubject() {\n      var _this5 = this;\n\n      var data = {\n        params: {\n          semesterId: this.optionId\n        },\n        postData: {}\n      };\n      this.$store.dispatch('arrange/getDataSubject', data).then(function (data) {\n        _this5.dataListSubject = _this5.$store.state.arrange.dataListSubject;\n      }).catch(function () {\n        _this5.loading = false;\n      });\n    },\n    getListForSwap: function getListForSwap() {\n      var _this6 = this;\n\n      var newArray = this.listSlot.flatMap(function (x) {\n        return x.timetable;\n      });\n      this.lecturerForSwap = newArray.filter(function (i) {\n        return i.slot === _this6.dataDetail.slot && i.lecturerShortName !== ' NOT_ASSIGN' && i.lecturerShortName !== _this6.dataDetail.lecturerShortName;\n      });\n    },\n    getListForSwapRoom: function getListForSwapRoom() {\n      var _this7 = this;\n\n      var newArray = this.listSlot.flatMap(function (x) {\n        return x.timetable;\n      });\n      this.roomForSwap = newArray.filter(function (i) {\n        return i.slot === _this7.dataDetail.slot && i.room !== 'NOT_ASSIGN' && i.room !== _this7.dataDetail.room;\n      });\n    },\n    swap: function swap(type) {\n      var _this8 = this;\n\n      var lecturerPublic = [];\n      var newArray = this.listSlot.flatMap(function (x) {\n        return x.timetable;\n      });\n      var timetableDetail = newArray.filter(function (x) {\n        return x.id === _this8.idTimetableSwap;\n      })[0];\n\n      if (timetableDetail.timetableStatus !== 'DRAFT') {\n        lecturerPublic.push(timetableDetail.lecturerShortName);\n      }\n\n      if (this.dataDetail.timetableStatus !== 'DRAFT') {\n        lecturerPublic.push(this.dataDetail.lecturerShortName);\n      }\n\n      var data = {\n        postData: [this.dataDetail.id, this.idTimetableSwap],\n        params: {\n          type: type\n        }\n      };\n\n      if (lecturerPublic.length > 0 && type === 'LECTURER') {\n        this.$confirm('Timetable status  of lecturer <strong> \\' ' + lecturerPublic + '\\'</strong> is not <span style=\"color: #409EFF;\"> DRAFT</span>,  you must send request again after edit. Do you still want edit?', 'Warning', {\n          confirmButtonText: 'YES',\n          cancelButtonText: 'NO',\n          dangerouslyUseHTMLString: true,\n          type: 'warning'\n        }).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _this8.$store.dispatch('arrange/swapData', data).then(function () {\n                    _this8.getListForSwap();\n\n                    _this8.getListForSwapRoom();\n\n                    _this8.resetModifier();\n\n                    _this8.$notify({\n                      title: 'Success',\n                      message: 'Swap Successfully',\n                      type: 'success',\n                      duration: 2000\n                    });\n                  });\n\n                case 1:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        })));\n      } else {\n        this.$store.dispatch('arrange/swapData', data).then(function () {\n          _this8.getListForSwap();\n\n          _this8.getListForSwapRoom();\n\n          _this8.resetModifier();\n\n          _this8.$notify({\n            title: 'Success',\n            message: 'Swap Successfully',\n            type: 'success',\n            duration: 2000\n          });\n        });\n      }\n    },\n    resetModifier: function resetModifier() {\n      this.idTimetableSwap = '';\n      this.modelLecturer = '';\n      this.modelRoom = '';\n      this.getDataListSlot();\n      this.isEdit = false;\n      this.getDataListLecturer();\n    },\n    saveCalendar: function saveCalendar() {\n      var _this9 = this;\n\n      var postData = {\n        id: this.dataDetail.id,\n        lecturerShortName: this.modelLecturer,\n        room: this.modelRoom\n      };\n      var lecturerPublic = [];\n      var timetable = this.dataListTeacherDetail.filter(function (x) {\n        return x.shortName === _this9.modelLecturer && x.timetableStatus !== 'DRAFT' && x.shortName !== 'NOT_ASSIGN';\n      });\n\n      if (timetable.length > 0) {\n        lecturerPublic.push(timetable[0].shortName);\n      }\n\n      if (this.dataDetail.timetableStatus !== 'DRAFT') {\n        lecturerPublic.push(this.dataDetail.lecturerShortName);\n      }\n\n      if (lecturerPublic.length > 0) {\n        this.$confirm('Timetable status  of lecturer <strong> \\' ' + lecturerPublic + '\\'</strong> is not <span style=\"color: #409EFF;\"> DRAFT</span>' + ' ,  you must send request again after edit. Do you still want edit?', 'Warning', {\n          confirmButtonText: 'YES',\n          cancelButtonText: 'NO',\n          dangerouslyUseHTMLString: true,\n          type: 'warning'\n        }).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _this9.loading = true;\n\n                  _this9.$store.dispatch('arrange/saveCalendar', postData).then(function (data) {\n                    _this9.resetModifier();\n\n                    _this9.$notify({\n                      title: 'Success',\n                      message: 'Update Successfully',\n                      type: 'success',\n                      duration: 2000\n                    });\n\n                    _this9.isEdit = false;\n                  }).catch(function () {\n                    _this9.loading = false;\n                  });\n\n                case 2:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        })));\n      } else {\n        this.loading = true;\n        this.$store.dispatch('arrange/saveCalendar', postData).then(function (data) {\n          _this9.resetModifier();\n\n          _this9.$notify({\n            title: 'Success',\n            message: 'Update Successfully',\n            type: 'success',\n            duration: 2000\n          });\n\n          _this9.isEdit = false;\n        }).catch(function () {\n          _this9.loading = false;\n        });\n      }\n    },\n    getDataListSlot: function getDataListSlot() {\n      var _this10 = this;\n\n      this.loading = true;\n      var data = {\n        postData: {\n          criteria: {\n            'timetable.semester': {\n              id: this.optionId\n            },\n            subject: {\n              department: this.infoUser.department\n            },\n            'timetable': {\n              'temp': false\n            }\n          },\n          inCriteria: {\n            room: {\n              name: this.valueRoom\n            },\n            className: {\n              name: this.valueClass\n            },\n            lecturer: {\n              shortName: this.valueTeacher\n            },\n            subject: {\n              code: this.valueSubject\n            }\n          }\n        },\n        queryParam: {\n          groupBy: this.groupBy,\n          semesterId: this.optionId\n        }\n      };\n      this.$store.dispatch('arrange/getListSlot', data).then(function (data) {\n        _this10.listSlot = _this10.$store.state.arrange.dataListSlot;\n        _this10.loading = false;\n      }).catch(function () {\n        _this10.loading = false;\n      });\n    },\n    getDataListRoom: function getDataListRoom() {\n      var _this11 = this;\n\n      var data = {\n        params: {\n          semesterId: this.optionId\n        },\n        postData: {}\n      };\n      this.$store.dispatch('arrange/getDataRoom', data).then(function (data) {\n        _this11.dataListRoom = _this11.$store.state.arrange.dataListRoom;\n      }).catch(function () {\n        _this11.loading = false;\n      });\n    },\n    getDataListLecturer: function getDataListLecturer() {\n      var _this12 = this;\n\n      var postData = {\n        postData: {\n          criteria: {\n            'login': true,\n            'status': 0,\n            department: this.infoUser.department\n          }\n        },\n        params: {\n          semesterId: this.optionId\n        }\n      };\n      this.$store.dispatch('arrange/getDataLecturer', postData).then(function (data) {\n        _this12.dataListLecturer = _this12.$store.state.arrange.dataListLecturer.results;\n\n        _this12.dataListLecturer.unshift({\n          id: null,\n          shortName: 'NOT_ASSIGN'\n        });\n      }).catch(function () {\n        _this12.loading = false;\n      });\n    },\n    getDataListClass: function getDataListClass() {\n      var _this13 = this;\n\n      var data = {\n        params: {\n          semesterId: this.optionId\n        },\n        postData: {}\n      };\n      this.$store.dispatch('arrange/getDataClass', data).then(function (data) {\n        _this13.dataListClass = _this13.$store.state.arrange.dataListClass; // this.$router.push({ path: this.redirect || '/' })\n      }).catch(function () {\n        _this13.loading = false;\n      });\n    },\n    // getDataListClassDetail() {\n    //   const data = {\n    //     params: {\n    //       timetableDetailId: this.dataDetail.id\n    //     },\n    //     postData: {\n    //       criteria: {\n    //         status: 0,\n    //         login: true\n    //       }\n    //     }\n    //   }\n    //   this.$store.dispatch('arrange/getDataClassDetail', data).then((data) => {\n    //     this.dataListClassDetail = this.$store.state.arrange.dataListClassDetail\n    //     this.dataListClassDetail.unshift({\n    //       id: null,\n    //       name: 'NOT_ASSIGN'\n    //     })\n    //   }).catch(() => {\n    //     this.loading = false\n    //   })\n    // },\n    getDataListTeacherDetail: function getDataListTeacherDetail() {\n      var _this14 = this;\n\n      var data = {\n        params: {\n          timetableDetailId: this.dataDetail.id\n        },\n        postData: {\n          criteria: {\n            status: 0,\n            login: true\n          }\n        }\n      };\n      this.$store.dispatch('arrange/getDataTeacherDetail', data).then(function (data) {\n        _this14.dataListTeacherDetail = _this14.$store.state.arrange.dataListTeacherDetail;\n\n        _this14.dataListTeacherDetail.unshift({\n          id: null,\n          shortName: 'NOT_ASSIGN'\n        });\n      }).catch(function () {\n        _this14.loading = false;\n      });\n    },\n    getDataItemArrange: function getDataItemArrange(itemSlot) {\n      this.isEdit = true;\n      this.dataDetail = itemSlot;\n      this.modelRoom = itemSlot.room;\n      this.modelLecturer = itemSlot.lecturerShortName;\n      this.getListForSwap();\n      this.getListForSwapRoom();\n      this.getDataListTeacherDetail();\n      this.idTimetableSwap = ''; // this.getDataListClassDetail()\n    },\n    addConfirm: function addConfirm() {\n      var _this15 = this;\n\n      this.$confirm('Do you want send request confirm to :<strong> \\'' + this.listTeacherConfirm.map(function (x) {\n        return x.shortName;\n      }) + '\\'</strong> ?', 'Warning', {\n        confirmButtonText: 'Yes',\n        cancelButtonText: 'Cancel',\n        dangerouslyUseHTMLString: true,\n        type: 'warning'\n      }).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var data;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                data = {\n                  params: {\n                    semesterId: _this15.optionId\n                  },\n                  postData: {\n                    abc: _this15.listTeacherConfirm.map(function (x) {\n                      return x.id;\n                    })\n                  }\n                };\n\n                _this15.$store.dispatch('arrange/addConfirm', data).then(function () {\n                  _this15.resetModifier();\n\n                  _this15.$notify({\n                    title: 'Success',\n                    message: 'Request Confirm Successfully',\n                    type: 'success',\n                    duration: 2000\n                  });\n                });\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      })));\n    },\n    isDisableConfirm: function isDisableConfirm() {\n      var isNotDraft = this.listTeacherConfirm.filter(function (i) {\n        if (i.timetableStatus !== 'DRAFT') {\n          return true;\n        }\n      });\n\n      if (this.valueTeacher.length === 0 || this.valueTeacher.includes('NOT_ASSIGN') || isNotDraft.length > 0) {\n        return true;\n      }\n\n      return false;\n    },\n    getListSlotExpForView: function getListSlotExpForView() {\n      var _this16 = this;\n\n      var paramQuery = {\n        semesterId: this.optionId,\n        groupBy: 'slot'\n      };\n      this.$store.dispatch('expected/listExpectedForView', paramQuery).then(function (data) {\n        _this16.listSlotExpectedView = _this16.$store.state.expected.listExpected;\n        _this16.listSlotExpectedViewTemp = _this16.$store.state.expected.listExpected;\n      });\n    },\n    getListSubjectExpForView: function getListSubjectExpForView() {\n      var _this17 = this;\n\n      var paramQuery = {\n        semesterId: this.optionId,\n        groupBy: 'subject'\n      };\n      this.$store.dispatch('expected/listExpectedForView', paramQuery).then(function (data) {\n        _this17.listSubjectExpectedView = _this17.$store.state.expected.listExpected;\n        _this17.listSubjectExpectedViewTemp = _this17.$store.state.expected.listExpected;\n      });\n    },\n    showViewAll: function showViewAll() {\n      var _this18 = this;\n\n      this.listLecturerExpected = [];\n      this.dialogViewAll = true;\n      this.listSlotExpectedViewTemp.forEach(function (element) {\n        _this18.listLecturerExpected.push(element.lecturerName);\n      });\n    },\n    exportFile: function exportFile(groupBy) {\n      var _this19 = this;\n\n      var data = {\n        params: {\n          semesterId: this.optionId,\n          groupBy: groupBy\n        }\n      };\n      this.$store.dispatch('request/exportFile', data).then(function (data) {\n        _this19.loading = false;\n        var url = window.URL.createObjectURL(new Blob([_this19.$store.state.request.fileExport]));\n        var link = document.createElement('a');\n        link.href = url;\n        var fileName = _this19.yearSelected[0].season + ' ' + _this19.yearSelected[0].year + '.xls';\n        link.setAttribute('download', fileName);\n        document.body.appendChild(link);\n        link.click();\n\n        _this19.$notify({\n          title: 'Success',\n          message: 'Export file success',\n          type: 'success',\n          duration: 2000\n        });\n      }).catch(function () {\n        _this19.loading = false;\n      });\n    }\n  }\n};\nexports.default = _default;",null]}