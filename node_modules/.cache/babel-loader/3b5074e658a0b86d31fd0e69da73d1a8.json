{"remainingRequest":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\src\\views\\request\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\src\\views\\request\\index.vue","mtime":1589868463109},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"C:/Users/DUONG/Desktop/managetimetable_webapp/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.string.iterator\");\n\nrequire(\"core-js/modules/es6.set\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"C:/Users/DUONG/Desktop/managetimetable_webapp/node_modules/@babel/runtime/helpers/toConsumableArray\"));\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"C:/Users/DUONG/Desktop/managetimetable_webapp/node_modules/@babel/runtime/helpers/objectSpread2\"));\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nvar _vuex = require(\"vuex\");\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default2 = {\n  name: 'Report',\n  components: {},\n  props: {\n    total: {\n      required: true,\n      type: Number\n    },\n    page: {\n      type: Number,\n      default: 1\n    },\n    limit: {\n      type: Number,\n      default: 10\n    },\n    pageSizes: {\n      type: Array,\n      default: function _default() {\n        return [10, 20, 30, 50];\n      }\n    },\n    layout: {\n      type: String,\n      default: 'total, sizes, prev, pager, next, jumper'\n    },\n    background: {\n      type: Boolean,\n      default: true\n    },\n    autoScroll: {\n      type: Boolean,\n      default: false\n    },\n    hidden: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      loading: false,\n      property: 'Blank',\n      valueOptionId: '',\n      userInfo: JSON.parse(localStorage.getItem('infoUser')),\n      idYear: '',\n      listYear: [],\n      infoUser: {},\n      listReport: [],\n      dialogFormAdd: false,\n      dialogFormReply: false,\n      form: {\n        purpose: ''\n      },\n      formReply: {\n        id: '',\n        purpose: '',\n        reply: ''\n      },\n      rules: {\n        purpose: [{\n          required: true,\n          message: 'Purpose is required.',\n          trigger: 'change'\n        }],\n        reply: [{\n          required: true,\n          message: 'Reply is required.',\n          trigger: 'change'\n        }]\n      },\n      valueEmail: '',\n      dataListEmail: [{\n        value: '',\n        title: 'All Email'\n      }],\n      currentPage: 1,\n      pageSize: 5,\n      total: 0,\n      limit: 10,\n      pageSizes: {\n        type: Array,\n        default: function _default() {\n          return [10, 20, 30, 50];\n        }\n      }\n    };\n  },\n  computed: (0, _objectSpread2.default)({}, (0, _vuex.mapGetters)(['name'])),\n  watch: {\n    valueOptionId: function valueOptionId() {\n      this.getListReport();\n    },\n    valueEmail: function valueEmail() {\n      this.getListReport(this.valueEmail);\n    }\n  },\n  created: function created() {\n    this.getYear();\n  },\n  methods: {\n    format_date: function format_date(value) {\n      if (value) {\n        return (0, _moment.default)(String(value)).format('YYYY/MM/DD');\n      }\n    },\n    handleChange: function handleChange(value) {},\n    getYear: function getYear() {\n      var _this = this;\n\n      this.$store.dispatch('expected/getListYear').then(function (data) {\n        _this.listYear = _this.$store.state.expected.listYear;\n\n        _this.listYear.forEach(function (element) {\n          if (element.now) {\n            _this.valueOptionId = element.id;\n\n            _this.getListEmail();\n          }\n        });\n\n        _this.getListReport();\n      }).catch(function () {\n        _this.loading = false;\n      });\n    },\n    getListEmail: function getListEmail() {\n      var _this2 = this;\n\n      if (this.userInfo.role.roleName !== 'ROLE_ADMIN') {\n        var paramQuery = {\n          'criteria': {\n            'semester': {\n              'id': this.valueOptionId\n            },\n            'lecturer': {\n              'googleId': this.userInfo.googleId,\n              //user đang đăng nhập\n              'email': this.valueEmail\n            }\n          },\n          'sortField': 'status',\n          'ascending': true\n        };\n      } else {\n        var paramQuery = {\n          'criteria': {\n            'semester': {\n              'id': this.valueOptionId\n            },\n            'lecturer': {\n              'department': this.userInfo.department,\n              'email': this.valueEmail\n            }\n          },\n          'sortField': 'status',\n          'ascending': true\n        };\n      }\n\n      this.$store.dispatch('report/getListReport', paramQuery).then(function () {\n        var data = _this2.$store.state.report.listReport.results;\n        var newData = data.map(function (item, index) {\n          return item.lecturer;\n        });\n        var unique = (0, _toConsumableArray2.default)(new Set(newData.map(function (item) {\n          return item.email;\n        })));\n        var newDataa = unique.map(function (item, index) {\n          return {\n            title: item,\n            value: item\n          };\n        });\n        _this2.dataListEmail = newDataa;\n      }).catch(function () {});\n    },\n    getListReport: function getListReport(email) {\n      var _this3 = this;\n\n      this.loading = true;\n\n      if (this.userInfo.role.roleName !== 'ROLE_ADMIN') {\n        var paramQuery = {\n          page: email ? 0 : this.currentPage,\n          limit: this.limit,\n          'criteria': {\n            'semester': {\n              'id': this.valueOptionId\n            },\n            'lecturer': {\n              'googleId': this.userInfo.googleId,\n              //user đang đăng nhập\n              'email': this.valueEmail\n            }\n          },\n          'sortField': 'status',\n          'ascending': false\n        };\n      } else {\n        var paramQuery = {\n          page: email ? 0 : this.currentPage,\n          limit: this.limit,\n          'criteria': {\n            'semester': {\n              'id': this.valueOptionId\n            },\n            'lecturer': {\n              'department': this.userInfo.department,\n              'email': this.valueEmail\n            }\n          },\n          'sortField': 'status',\n          'ascending': false\n        };\n      }\n\n      this.$store.dispatch('report/getListReport', paramQuery).then(function () {\n        _this3.listReport = _this3.$store.state.report.listReport.results;\n        _this3.total = _this3.$store.state.report.listReport.totalCount;\n        _this3.loading = false;\n      }).catch(function () {\n        _this3.loading = false;\n      });\n    },\n    handleCreate: function handleCreate() {\n      this.dialogFormAdd = true;\n    },\n    addData: function addData() {\n      var _this4 = this;\n\n      this.form.purpose = this.form.purpose.trim();\n      this.$refs['dataFormAdd'].validate(function (valid) {\n        var postData = {\n          'content': _this4.form.purpose.trim()\n        };\n\n        if (valid && _this4.form.purpose.trim()) {\n          _this4.dialogFormAdd = false;\n          _this4.loading = true;\n\n          _this4.$store.dispatch('report/addReport', postData).then(function () {\n            _this4.$notify({\n              title: 'Success',\n              message: 'Update Successfully',\n              type: 'success',\n              duration: 2000\n            });\n\n            _this4.getListReport();\n          });\n        }\n      });\n    },\n    reply: function reply(row, status) {\n      this.dialogFormReply = true;\n      this.formReply.purpose = row.content;\n      this.formReply.id = row.id;\n    },\n    changeReport: function changeReport(status) {\n      var _this5 = this;\n\n      this.formReply.reply = this.formReply.reply.trim();\n      this.$refs['dialogFormReply'].validate(function (valid) {\n        var postData = {\n          'id': _this5.formReply.id,\n          'replyContent': _this5.formReply.reply,\n          'status': status\n        };\n\n        if (valid) {\n          _this5.dialogFormReply = false;\n\n          _this5.$store.dispatch('report/approveReport', postData).then(function () {\n            _this5.$notify({\n              title: 'Success',\n              message: 'Update Successfully',\n              type: 'success',\n              duration: 2000\n            });\n\n            _this5.getListReport();\n          });\n        }\n      });\n    },\n    handleSizeChange: function handleSizeChange(val) {\n      this.limit = val;\n      this.getListReport();\n    },\n    handleCurrentChange: function handleCurrentChange(val) {\n      this.currentPage = val;\n      this.getListReport();\n    }\n  }\n};\nexports.default = _default2;",null]}