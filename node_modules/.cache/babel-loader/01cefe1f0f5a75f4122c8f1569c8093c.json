{"remainingRequest":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\src\\views\\manage\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\src\\views\\manage\\index.vue","mtime":1590593915856},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"C:/Users/DUONG/Desktop/managetimetable_webapp/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.array.sort\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/es6.array.find-index\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"C:/Users/DUONG/Desktop/managetimetable_webapp/node_modules/@babel/runtime/helpers/asyncToGenerator\"));\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nvar _ListRadio = _interopRequireDefault(require(\"@/components/ListRadio\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default2 = {\n  name: 'Dashboard',\n  components: {\n    ListRadio: _ListRadio.default\n  },\n  filters: {\n    statusFilter: function statusFilter(status) {\n      var statusMap = {\n        published: 'success',\n        draft: 'gray',\n        deleted: 'danger'\n      };\n      return statusMap[status];\n    }\n  },\n  props: {\n    total: {\n      required: true,\n      type: Number\n    },\n    page: {\n      type: Number,\n      default: 1\n    },\n    limit: {\n      type: Number,\n      default: 10\n    },\n    pageSizes: {\n      type: Array,\n      default: function _default() {\n        return [10, 20, 30, 50];\n      }\n    },\n    layout: {\n      type: String,\n      default: 'total, sizes, prev, pager, next, jumper'\n    },\n    background: {\n      type: Boolean,\n      default: true\n    },\n    autoScroll: {\n      type: Boolean,\n      default: false\n    },\n    hidden: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      list: [],\n      listLoading: true,\n      temp: {\n        googleId: '',\n        fullName: '',\n        email: '',\n        phone: '',\n        shortName: '',\n        quotaClass: '',\n        fillingExpected: '',\n        headOfDepartment: '',\n        department: 'CF',\n        fullTime: false,\n        active: false\n      },\n      yearSelected: {},\n      emailAdd: {\n        email: ''\n      },\n      dialogFormVisible: false,\n      dialogFormAdd: false,\n      dialogFormexpected: false,\n      dialogStatus: '',\n      textMap: {\n        update: 'Edit lecturer\\'s information :',\n        create: 'Add new lecturer'\n      },\n      listStatus: [{\n        'label': 'Activated',\n        'value': 0\n      }, {\n        'label': 'Deactivated',\n        'value': 1\n      }],\n      rules: {\n        fullName: [{\n          required: true,\n          message: 'Name is required.',\n          trigger: 'change'\n        }],\n        shortName: [{\n          required: true,\n          message: 'Short Name is required.',\n          trigger: 'change'\n        }],\n        email: [{\n          type: 'email',\n          required: true,\n          message: 'Email is required',\n          trigger: 'change'\n        }]\n      },\n      emailAddRule: {\n        email: [{\n          type: 'email',\n          required: true,\n          message: 'Email is required',\n          trigger: 'change'\n        }]\n      },\n      property: 'Blank',\n      textarea: '',\n      textareaNote: '',\n      note: '',\n      valueOption: '',\n      valueOptionStatus: 0,\n      idYear: '',\n      listYear: [],\n      infoUser: {},\n      expectedSubjects: [],\n      expectedSlots: [],\n      expectedNote: {},\n      dataExpectedEdit: {\n        expectedSubjects: [],\n        expectedSlots: [],\n        expectedNote: {}\n      },\n      isEdit: false,\n      dataListEmail: [{\n        value: '',\n        title: 'All Email'\n      }],\n      currentRow: {},\n      currentPage: 1,\n      pageSize: 5,\n      total: 0,\n      limit: 10,\n      pageSizes: {\n        type: Array,\n        default: function _default() {\n          return [10, 20, 30, 50];\n        }\n      },\n      valueEmail: '',\n      listLoadingRadio: false,\n      isActive: true\n    };\n  },\n  watch: {\n    valueOption: function valueOption() {\n      this.getDataExpected();\n    },\n    valueOptionStatus: function valueOptionStatus() {\n      var _this = this;\n\n      this.getListEmail();\n\n      if (this.valueOptionStatus === 0) {\n        this.isActive = true;\n      } else {\n        this.isActive = false;\n      }\n\n      setTimeout(function () {\n        _this.fetchData(_this.valueOptionStatus, _this.valueEmail);\n      }, 300);\n    },\n    valueEmail: function valueEmail() {\n      var _this2 = this;\n\n      setTimeout(function () {\n        _this2.fetchData(_this2.valueOptionStatus, _this2.valueEmail);\n      }, 300);\n    }\n  },\n  created: function created() {\n    this.fetchData();\n    this.getListEmail();\n  },\n  methods: {\n    tableRowClassName: function tableRowClassName(_ref) {\n      var row = _ref.row,\n          rowIndex = _ref.rowIndex;\n\n      if (row.status === 'DEACTIVATE') {\n        return 'warning-row';\n      }\n    },\n    logout: function () {\n      var _logout = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.$store.dispatch('user/logout');\n\n              case 2:\n                localStorage.removeItem('infoUser');\n                this.$router.push(\"/login?redirect=\".concat(this.$route.fullPath));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function logout() {\n        return _logout.apply(this, arguments);\n      }\n\n      return logout;\n    }(),\n    handleChange: function handleChange(value) {},\n    getYear: function getYear() {\n      var _this3 = this;\n\n      this.$store.dispatch('expected/getListYear').then(function (data) {\n        _this3.listYear = _this3.$store.state.expected.listYear;\n\n        _this3.listYear.forEach(function (element) {\n          if (element.now) {\n            _this3.valueOption = element.id;\n          }\n        });\n      }).catch(function () {});\n    },\n    changStatus: function changStatus(row, status) {\n      var _this4 = this;\n\n      var data = {\n        params: {\n          'status': status\n        },\n        'lecturerGoogleId': row.googleId\n      };\n\n      if (status === 'DEACTIVATE') {\n        this.$confirm('Will remove timetable of lecturer : \\'<strong>' + row.email + '</strong>\\' in current semester (if exist)?', 'Warning', {\n          iconColor: \"red\",\n          dangerouslyUseHTMLString: true,\n          confirmButtonText: 'Confirm',\n          cancelButtonText: 'Cancel',\n          type: 'DEACTIVATE'\n        }).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _this4.callAPIChangeStatus(data);\n\n                case 1:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        })));\n      } else {\n        this.callAPIChangeStatus(data);\n      }\n    },\n    callAPIChangeStatus: function callAPIChangeStatus(data) {\n      var _this5 = this;\n\n      this.$store.dispatch('manager/changeStatus', data).then(function () {\n        _this5.fetchData();\n\n        _this5.listLoading = false;\n\n        _this5.$notify({\n          title: 'Success',\n          message: 'Change status successfully',\n          type: 'success',\n          duration: 2000\n        });\n      }).catch(function () {\n        _this5.listLoading = false;\n      });\n    },\n    getListEmail: function getListEmail() {\n      var _this6 = this;\n\n      this.list = [];\n      this.infoUser = JSON.parse(localStorage.getItem('infoUser'));\n      var data = {\n        page: 0,\n        limit: this.limit,\n        criteria: {\n          role: {\n            id: 2\n          },\n          department: this.infoUser.department,\n          email: this.valueEmail,\n          status: this.valueOptionStatus\n        },\n        'sortField': 'email',\n        'ascending': false\n      };\n      this.$store.dispatch('manager/getListUser', data).then(function (data) {\n        var data = _this6.$store.state.manager.listUser.results;\n        _this6.dataListEmail = [{\n          value: '',\n          title: 'All Email'\n        }], data.forEach(function (element) {\n          _this6.dataListEmail.push({\n            'title': element.email,\n            'value': element.email\n          });\n        });\n      }).catch(function () {});\n    },\n    fetchData: function fetchData(status, email) {\n      var _this7 = this;\n\n      this.infoUser = JSON.parse(localStorage.getItem('infoUser'));\n      this.listLoading = true;\n\n      if (this.valueOptionStatus === 'ALL') {\n        var data = {\n          page: email || status ? 0 : this.currentPage,\n          limit: this.limit,\n          criteria: {\n            role: {\n              id: 2\n            },\n            department: this.infoUser.department,\n            email: email\n          },\n          'sortField': 'email',\n          'ascending': true\n        };\n      } else {\n        var data = {\n          page: email || status ? 0 : this.currentPage,\n          limit: this.limit,\n          criteria: {\n            role: {\n              id: 2\n            },\n            department: this.infoUser.department,\n            status: this.valueOptionStatus,\n            email: email\n          },\n          'sortField': 'email',\n          'ascending': true\n        };\n      }\n\n      this.$store.dispatch('manager/getListUser', data).then(function (data) {\n        _this7.list = _this7.$store.state.manager.listUser.results;\n        _this7.total = _this7.$store.state.manager.listUser.totalCount;\n        _this7.listLoading = false;\n      }).catch(function () {\n        _this7.listLoading = false;\n      });\n    },\n    handleHOD: function handleHOD(row) {\n      var _this8 = this;\n\n      this.$confirm('Do you really want to transfer Head of Department role to lecturer : \\'<strong>' + row.email + '</strong>\\' ?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        dangerouslyUseHTMLString: true,\n        type: 'warning',\n        title: 'TRANSFER ROLE'\n      }).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var paramQuery;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this8.listLoading = true;\n                paramQuery = {\n                  lecturerGoogleId: row.googleId\n                };\n\n                _this8.$store.dispatch('manager/changeHOD', paramQuery).then(function () {\n                  _this8.listLoading = false;\n\n                  _this8.logout();\n\n                  var startInterval = _this8.$store.state.startInterval;\n                  clearInterval(startInterval);\n                }).catch(function () {\n                  _this8.listLoading = false;\n                });\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      })));\n    },\n    handleDelete: function handleDelete(row, index) {\n      var _this9 = this;\n\n      this.$confirm('Do you really want to delete lecturer : \\'<strong>' + row.email + '</strong>\\' ?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        dangerouslyUseHTMLString: true,\n        type: 'warning'\n      }).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _this9.listLoading = true;\n\n                _this9.$store.dispatch('manager/deleteUser', row.id).then(function () {\n                  _this9.$notify({\n                    title: 'Success',\n                    message: 'Delete Successfully',\n                    type: 'success',\n                    duration: 2000\n                  });\n\n                  _this9.list.splice(index, 1);\n\n                  _this9.listLoading = false;\n                }).catch(function () {\n                  _this9.listLoading = false;\n                });\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      })));\n    },\n    info: function info(row) {\n      this.temp = Object.assign({}, row); // copy obj\n\n      this.dialogStatus = 'update';\n      this.dialogFormVisible = true;\n    },\n    infoexpected: function infoexpected(row) {\n      this.currentRow = row;\n      this.dialogFormexpected = true;\n      this.getYear();\n      this.getDataExpected();\n    },\n    handleCreate: function handleCreate() {\n      this.dialogStatus = 'create';\n      this.dialogFormAdd = true;\n    },\n    updateData: function updateData() {\n      var _this10 = this;\n\n      var regexPhoneNumber = /((0)+([0-9]{9}))/g;\n      this.$refs['dataForm'].validate(function (valid) {\n        var isValidPhone = regexPhoneNumber.test(_this10.temp.phone) || !_this10.temp.phone && !regexPhoneNumber.test(_this10.temp.phone);\n\n        if (valid && isValidPhone) {\n          _this10.$store.dispatch('manager/updateUser', _this10.temp).then(function () {\n            _this10.fetchData(_this10.valueOptionStatus, _this10.valueEmail);\n\n            _this10.dialogFormVisible = false;\n\n            _this10.$notify({\n              title: 'Success',\n              message: 'Update Successfully',\n              type: 'success',\n              duration: 2000\n            });\n          });\n        }\n\n        if (!isValidPhone) {\n          _this10.$confirm('Số điện thoại không đúng định dạng.', 'Warning', {\n            confirmButtonText: 'Ok',\n            cancelButtonText: 'Cancel',\n            dangerouslyUseHTMLString: true,\n            type: 'warning'\n          });\n        }\n      });\n    },\n    addData: function addData() {\n      var _this11 = this;\n\n      this.$refs['dataFormAdd'].validate(function (valid) {\n        if (valid) {\n          _this11.$store.dispatch('manager/addUser', _this11.emailAdd).then(function () {\n            _this11.fetchData();\n\n            _this11.dialogFormAdd = false;\n\n            _this11.$notify({\n              title: 'Success',\n              message: 'Created Successfully',\n              type: 'success',\n              duration: 2000\n            });\n\n            _this11.getListEmail();\n\n            _this11.emailAdd = {\n              email: ''\n            };\n\n            _this11.$refs['dataFormAdd'].resetFields();\n          }).catch(function (err) {});\n        } else {\n          return false;\n        }\n      });\n    },\n    handleDataExpectedEdit: function handleDataExpectedEdit(data) {\n      if (data.isSubject) {\n        var indexOfSubject = this.dataExpectedEdit.expectedSubjects.findIndex(function (item) {\n          return item.name === data.value.name;\n        });\n\n        if (indexOfSubject && indexOfSubject === -1) {\n          this.dataExpectedEdit.expectedSubjects.push(data.value);\n        } else {\n          this.dataExpectedEdit.expectedSubjects[indexOfSubject].levelOfPrefer = data.value.levelOfPrefer;\n        }\n      } else {\n        var indexOfSlot = this.dataExpectedEdit.expectedSlots.findIndex(function (item) {\n          return item.name === data.value.name;\n        });\n\n        if (indexOfSlot && indexOfSlot === -1) {\n          this.dataExpectedEdit.expectedSlots.push(data.value);\n        } else {\n          this.dataExpectedEdit.expectedSlots[indexOfSlot].levelOfPrefer = data.value.levelOfPrefer;\n        }\n      }\n    },\n    sort: function sort(list) {\n      list.sort(function (a, b) {\n        var nameA = a.name.toUpperCase();\n        var nameB = b.name.toUpperCase();\n\n        if (nameA < nameB) {\n          return -1;\n        }\n\n        if (nameA > nameB) {\n          return 1;\n        }\n\n        return 0;\n      });\n    },\n    getDataExpected: function getDataExpected() {\n      var _this12 = this;\n\n      this.expectedSlots = [];\n      this.yearSelected = this.listYear.filter(function (i) {\n        return i.id === _this12.valueOption;\n      });\n\n      if (!this.yearSelected[0].hasData) {\n        return;\n      }\n\n      this.listLoading = true;\n      this.dataExpectedEdit = {\n        expectedSubjects: [],\n        expectedSlots: [],\n        expectedNote: {}\n      };\n      var paramQuery = {\n        lecturerId: this.currentRow.googleId,\n        semesterId: this.valueOption\n      };\n      this.$store.dispatch('expected/getDataExpected', paramQuery).then(function (data) {\n        _this12.expectedSubjects = _this12.$store.state.expected.dataExpected.expectedSubjects;\n\n        if (_this12.$store.state.expected.dataExpected.expectedSlots) {\n          var slot = ['M1', 'M2', 'M3', 'E1', 'E2', 'E3', 'M4', 'M5', 'E4', 'E5'];\n          var dataTemp = _this12.$store.state.expected.dataExpected.expectedSlots;\n          slot.forEach(function (element) {\n            dataTemp.forEach(function (item) {\n              if (element === item.name) {\n                _this12.expectedSlots.push(item);\n              }\n            });\n          });\n        } else {\n          _this12.expectedSlots = [];\n        }\n\n        if (_this12.$store.state.expected.dataExpected.expectedSubjects) {\n          _this12.expectedSubjects = _this12.$store.state.expected.dataExpected.expectedSubjects;\n\n          _this12.sort(_this12.expectedSubjects);\n        } else {\n          _this12.expectedSubjects = [];\n        }\n\n        if (_this12.$store.state.expected.dataExpected.expectedNote) {\n          _this12.expectedNote = _this12.$store.state.expected.dataExpected.expectedNote;\n        } else {\n          _this12.expectedNote = {};\n        }\n\n        _this12.listLoading = false;\n      }).catch(function () {});\n    },\n    reuseExpected: function reuseExpected() {\n      var _this13 = this;\n\n      var paramQuery = {\n        lecturerGoogleId: this.currentRow.googleId,\n        semesterId: this.valueOption\n      };\n      this.$store.dispatch('expected/reuseExected', paramQuery).then(function (data) {\n        _this13.getDataExpected();\n\n        _this13.fetchData();\n\n        _this13.$notify({\n          title: 'Success',\n          message: 'Update Successfully',\n          type: 'success',\n          duration: 2000\n        });\n      }).catch(function () {\n        _this13.loading = false;\n      });\n    },\n    saveExected: function saveExected() {\n      var _this14 = this;\n\n      this.dataExpectedEdit.expectedNote.expectedNumOfClass = this.expectedNote.expectedNumOfClass;\n      this.dataExpectedEdit.expectedNote.maxConsecutiveSlot = this.expectedNote.maxConsecutiveSlot;\n      this.dataExpectedEdit.expectedNote.note = this.expectedNote.note;\n      this.dataExpectedEdit.lecturer = {\n        googleId: this.currentRow.googleId\n      };\n      this.dataExpectedEdit.semester = {\n        id: this.valueOption\n      };\n      this.dataExpectedEdit.method = 'post';\n\n      if (this.$store.state.expected.dataExpected.id !== 0) {\n        this.dataExpectedEdit.method = 'put';\n        this.dataExpectedEdit.id = this.$store.state.expected.dataExpected.id;\n      }\n\n      this.$store.dispatch('expected/saveDataExpected', this.dataExpectedEdit).then(function (data) {\n        _this14.isEdit = false;\n        _this14.dataExpectedEdit = {\n          expectedSubjects: [],\n          expectedSlots: [],\n          expectedNote: {}\n        };\n\n        _this14.getDataExpected();\n\n        _this14.fetchData();\n\n        _this14.$notify({\n          title: 'Success',\n          message: 'Update Successfully',\n          type: 'success',\n          duration: 2000\n        });\n      }).catch(function () {});\n    },\n    editExpected: function editExpected() {\n      this.isEdit = true;\n    },\n    handleSizeChange: function handleSizeChange(val) {\n      console.log('val', val); // this.$emit('pagination', { page: this.currentPage, limit: val })\n\n      this.limit = val;\n      this.fetchData();\n    },\n    handleCurrentChange: function handleCurrentChange(val) {\n      // this.$emit('pagination', { page: val, limit: this.pageSize })\n      this.currentPage = val;\n      this.fetchData();\n    }\n  }\n};\nexports.default = _default2;",null]}