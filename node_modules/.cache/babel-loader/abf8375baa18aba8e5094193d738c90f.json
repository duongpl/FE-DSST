{"remainingRequest":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\src\\store\\modules\\manager.js","dependencies":[{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\src\\store\\modules\\manager.js","mtime":1589868456031},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _table = require(\"@/api/table\");\n\nvar state = {\n  listUser: []\n};\nvar mutations = {\n  LIST_USER: function LIST_USER(state, data) {\n    state.listUser = data;\n  },\n  UPDATE_USER: function UPDATE_USER(state, data) {\n    state.listUser = data;\n  },\n  ADD_USER: function ADD_USER(state, data) {\n    state.listUser = data;\n  },\n  DELETE_USER: function DELETE_USER(state, data) {\n    state.listUser = data;\n  },\n  CHANGE_HOD: function CHANGE_HOD(state, data) {\n    state.listUser = data;\n  },\n  CHANGE_STATUS: function CHANGE_STATUS(state, data) {\n    state.listUser = data;\n  }\n};\nvar actions = {\n  getListUser: function getListUser(_ref, data) {\n    var commit = _ref.commit;\n    return new Promise(function (resolve, reject) {\n      (0, _table.getListUser)(data).then(function (response) {\n        commit('LIST_USER', response);\n        resolve();\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  updateUser: function updateUser(_ref2, data) {\n    var commit = _ref2.commit;\n    return new Promise(function (resolve, reject) {\n      (0, _table.updateUser)({\n        data: data\n      }).then(function (response) {\n        commit('UPDATE_USER', response);\n        resolve();\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  addUser: function addUser(_ref3, data) {\n    var commit = _ref3.commit;\n    return new Promise(function (resolve, reject) {\n      (0, _table.addUser)({\n        data: data\n      }).then(function (response) {\n        commit('ADD_USER', response);\n        resolve();\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  deleteUser: function deleteUser(_ref4, data) {\n    var commit = _ref4.commit;\n    return new Promise(function (resolve, reject) {\n      (0, _table.deleteUser)({\n        data: data\n      }).then(function (response) {\n        commit('DELETE_USER', response);\n        resolve();\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  changeHOD: function changeHOD(_ref5, data) {\n    var commit = _ref5.commit;\n    return new Promise(function (resolve, reject) {\n      (0, _table.changeHOD)({\n        data: data\n      }).then(function (response) {\n        commit('CHANGE_HOD', response);\n        resolve();\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  updateUserLocalStorage: function updateUserLocalStorage(_ref6, data) {\n    var commit = _ref6.commit;\n    return new Promise(function (resolve, reject) {\n      (0, _table.updateUser)({\n        data: data\n      }).then(function (response) {\n        commit('UPDATE_USER', response);\n        localStorage.setItem('infoUser', JSON.stringify(response));\n        resolve();\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  changeStatus: function changeStatus(_ref7, data) {\n    var commit = _ref7.commit;\n    return new Promise(function (resolve, reject) {\n      (0, _table.changeStatus)({\n        data: data\n      }).then(function (response) {\n        commit('CHANGE_STATUS', response);\n        resolve();\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  }\n};\nvar _default = {\n  namespaced: true,\n  state: state,\n  mutations: mutations,\n  actions: actions\n};\nexports.default = _default;",null]}