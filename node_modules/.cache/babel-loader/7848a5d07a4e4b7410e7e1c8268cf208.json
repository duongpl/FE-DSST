{"remainingRequest":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\src\\components\\TableCustom\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\src\\components\\TableCustom\\index.vue","mtime":1590592634210},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'TableCustom',\n  props: ['listSlotData', 'header', 'groupBy', 'dataSwap'],\n  data: function data() {\n    return {\n      dataChange: {},\n      listDataChange: []\n    };\n  },\n  methods: {\n    getDataItemArrange: function getDataItemArrange(itemSlot) {\n      this.listDataChange = this.dataSwap;\n      var dataChange = itemSlot;\n      this.dataChange = itemSlot;\n      this.listDataChange.push(itemSlot);\n\n      if (this.listDataChange.length > 2) {\n        this.listDataChange.splice(0, 1);\n      } // const index = this.listDataChange.findIndex(item => item.id === itemSlot.id)\n      // if (index !== -1) {\n      //   this.listDataChange.splice(index, 1)\n      // } else {\n      //   this.listDataChange.push(itemSlot)\n      // }\n\n\n      this.$emit('dataEdit', dataChange);\n      this.$emit('dataSwap', this.listDataChange);\n    },\n    handleCurrentChange: function handleCurrentChange(data) {\n      this.currentRow = data;\n    }\n  }\n};\nexports.default = _default;",null]}