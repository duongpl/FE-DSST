{"remainingRequest":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\src\\views\\expected\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\src\\views\\expected\\index.vue","mtime":1589868463105},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { mapGetters } from 'vuex'\r\nimport ListRadio from '@/components/ListRadio'\r\nimport { log } from 'util'\r\n\r\nexport default {\r\n  name: 'Dashboard',\r\n  components: {\r\n    ListRadio\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      loading: true,\r\n      property: 'Blank',\r\n      textarea: '',\r\n      textareaNote: '',\r\n      note: '',\r\n      valueOption: {},\r\n      idYear: '',\r\n      listYear: [],\r\n      infoUser: {},\r\n      expectedSubjects: [],\r\n      expectedSlots: [],\r\n      expectedNote: {},\r\n      dataExpectedEdit: {\r\n        expectedSubjects: [],\r\n        expectedSlots: [],\r\n        expectedNote: {}\r\n      },\r\n      isEdit: false,\r\n      yearSelected: {}\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    ...mapGetters([\r\n      'name'\r\n    ])\r\n  },\r\n\r\n  watch: {\r\n    valueOption() {\r\n      console.log('2')\r\n\r\n      this.getDataExpected()\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.getYear()\r\n    this.infoUser = JSON.parse(localStorage.getItem('infoUser'))\r\n  },\r\n\r\n  methods: {\r\n    handleChange(value) {\r\n    },\r\n\r\n    reuseExpected() {\r\n      this.loading = true\r\n      const paramQuery = {\r\n        lecturerGoogleId: this.infoUser.googleId,\r\n        semesterId: this.valueOption\r\n      }\r\n      this.$store.dispatch('expected/reuseExected', paramQuery).then((data) => {\r\n        console.log('3')\r\n        this.getDataExpected()\r\n        this.$notify({\r\n          title: 'Success',\r\n          message: 'Update Successfully',\r\n          type: 'success',\r\n          duration: 2000\r\n        })\r\n        this.loading = false\r\n      }).catch(() => {\r\n        this.loading = false\r\n      })\r\n    },\r\n\r\n    getYear() {\r\n      this.loading = true\r\n      this.$store.dispatch('expected/getListYear').then((data) => {\r\n        this.listYear = this.$store.state.expected.listYear\r\n        this.listYear.forEach(element => {\r\n          if (element.now) {\r\n            this.valueOption = element.id\r\n          }\r\n        })\r\n        this.loading = false\r\n      }).catch(() => {\r\n        this.loading = false\r\n      })\r\n    },\r\n    sort(list) {\r\n      list.sort(function (a, b) {\r\n        const nameA = a.name.toUpperCase()\r\n        const nameB = b.name.toUpperCase()\r\n        if (nameA < nameB) {\r\n          return -1\r\n        }\r\n        if (nameA > nameB) {\r\n          return 1\r\n        }\r\n        return 0\r\n      })\r\n    },\r\n    getDataExpected() {\r\n      this.expectedSlots = []\r\n      this.yearSelected = this.listYear.filter(i => i.id === this.valueOption)\r\n      if (!this.yearSelected[0].hasData) {\r\n        return;\r\n      }\r\n      this.loading = true\r\n      this.dataExpectedEdit = {\r\n        expectedSubjects: [],\r\n        expectedSlots: [],\r\n        expectedNote: {}\r\n      }\r\n      const paramQuery = {\r\n        lecturerId: this.infoUser.googleId,\r\n        semesterId: this.valueOption\r\n      }\r\n\r\n      this.$store.dispatch('expected/getDataExpected', paramQuery).then((data) => {\r\n        this.expectedSubjects = this.$store.state.expected.dataExpected.expectedSubjects\r\n        if (this.$store.state.expected.dataExpected.expectedSlots) {\r\n          const slot = ['M1', 'M2', 'M3', 'E1', 'E2', 'E3', 'M4', 'M5', 'E4', 'E5']\r\n          const dataTemp = this.$store.state.expected.dataExpected.expectedSlots\r\n          slot.forEach(element => {\r\n            dataTemp.forEach(item => {\r\n              if (element === item.name) {\r\n                this.expectedSlots.push(item)\r\n              }\r\n            })\r\n          })\r\n        } else {\r\n          this.expectedSlots = []\r\n        }\r\n\r\n        if (this.$store.state.expected.dataExpected.expectedSubjects) {\r\n          this.expectedSubjects = this.$store.state.expected.dataExpected.expectedSubjects\r\n          this.sort(this.expectedSubjects)\r\n        } else {\r\n          this.expectedSubjects = []\r\n        }\r\n\r\n        if (this.$store.state.expected.dataExpected.expectedNote) {\r\n          this.expectedNote = this.$store.state.expected.dataExpected.expectedNote\r\n        } else {\r\n          this.expectedNote = {}\r\n        }\r\n        this.loading = false\r\n        this.yearSelected = this.listYear.filter(i => i.id === this.valueOption)\r\n      }).catch(() => {\r\n        this.loading = false\r\n      })\r\n    },\r\n\r\n    handleDataExpectedEdit(data) {\r\n      if (data.isSubject) {\r\n        const indexOfSubject = this.dataExpectedEdit.expectedSubjects.findIndex(item => item.name === data.value.name)\r\n        if (indexOfSubject && indexOfSubject === -1) {\r\n          this.dataExpectedEdit.expectedSubjects.push(data.value)\r\n        } else {\r\n          this.dataExpectedEdit.expectedSubjects[indexOfSubject].levelOfPrefer = data.value.levelOfPrefer\r\n        }\r\n      } else {\r\n        const indexOfSlot = this.dataExpectedEdit.expectedSlots.findIndex(item => item.name === data.value.name)\r\n        if (indexOfSlot && indexOfSlot === -1) {\r\n          this.dataExpectedEdit.expectedSlots.push(data.value)\r\n        } else {\r\n          this.dataExpectedEdit.expectedSlots[indexOfSlot].levelOfPrefer = data.value.levelOfPrefer\r\n        }\r\n      }\r\n    },\r\n    saveExected() {\r\n      this.loading = true\r\n      this.dataExpectedEdit.expectedNote.expectedNumOfClass = this.expectedNote.expectedNumOfClass\r\n      this.dataExpectedEdit.expectedNote.maxConsecutiveSlot = this.expectedNote.maxConsecutiveSlot\r\n      this.dataExpectedEdit.expectedNote.note = this.expectedNote.note\r\n      this.dataExpectedEdit.lecturer = {\r\n        googleId: this.infoUser.googleId\r\n      }\r\n      this.dataExpectedEdit.semester = {\r\n        id: this.valueOption\r\n      }\r\n      this.dataExpectedEdit.method = 'post'\r\n\r\n      // hihi ok\r\n      if (this.$store.state.expected.dataExpected.id !== 0) {\r\n        this.dataExpectedEdit.method = 'put'\r\n        this.dataExpectedEdit.id = this.$store.state.expected.dataExpected.id\r\n      }\r\n\r\n      this.$store.dispatch('expected/saveDataExpected', this.dataExpectedEdit).then((data) => {\r\n        this.isEdit = false\r\n        this.dataExpectedEdit = {\r\n          expectedSubjects: [],\r\n          expectedSlots: [],\r\n          expectedNote: {}\r\n        }\r\n        this.$notify({\r\n          title: 'Success',\r\n          message: 'Save Successfully',\r\n          type: 'success',\r\n          duration: 2000\r\n        })\r\n        this.getDataExpected()\r\n        this.loading = false\r\n      }).catch(() => {\r\n        this.loading = false\r\n      })\r\n    },\r\n    editExpected() {\r\n      this.isEdit = true\r\n    }\r\n  }\r\n}\r\n",null]}