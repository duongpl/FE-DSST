{"remainingRequest":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\src\\views\\data-process\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\src\\views\\data-process\\index.vue","mtime":1589868463104},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { mapGetters } from 'vuex'\r\nimport ListRadio from '@/components/ListRadio'\r\nimport TableCustom from '@/components/TableCustom'\r\nimport { MessageBox, Message } from 'element-ui'\r\n\r\nexport default {\r\n  components: {\r\n    ListRadio,\r\n    TableCustom\r\n  },\r\n  data() {\r\n    return {\r\n      slot: ['M1', 'M2', 'M3', 'E1', 'E2', 'E3', 'M4', 'M5', 'E4', 'E5'],\r\n      file: '',\r\n      valueOptionId: '',\r\n      listYear: '',\r\n      loading: false,\r\n      nameFile: '',\r\n      yearSelected: {},\r\n      typeFile: '',\r\n      listReport: [],\r\n      dialogFormexpected: false,\r\n      expectedSubjects: [],\r\n      expectedSlots: [],\r\n      expectedNote: {},\r\n      dataExpectedEdit: {\r\n        expectedSubjects: [],\r\n        expectedSlots: [],\r\n        expectedNote: {}\r\n      },\r\n      isEdit: false,\r\n      currentRow: {},\r\n      hasFile: false,\r\n      isFileExcel: true,\r\n      listGeneration: [],\r\n      loadingGeneration: false,\r\n      listDetailGeneration: [],\r\n      listFull:[],\r\n      dialogDetailGeneration: false,\r\n      currentPage: 1,\r\n      pageSize: 5,\r\n      totalCount: 0,\r\n      pageSizes: {\r\n        type: Array,\r\n        default() {\r\n          return [10, 20, 30, 50]\r\n        }\r\n      },\r\n      isRunning: Boolean,\r\n      limit: 10,\r\n      startInterval: '',\r\n      idSetDefault: '',\r\n      selected: '',\r\n      listTeach: [],\r\n      valueTeacher: [],\r\n      listDetailGenerationTemp: [],\r\n      mutationRate: 1.0,\r\n      populationSize: 100,\r\n      tournamentSize: 3,\r\n      convergenceCheckRange: 70,\r\n      hardConstraintCoff: 0.7,\r\n      softConstraintCoff: 0.3,\r\n      parttimeCoff: 0.5,\r\n      slotCoff: 0.35,\r\n      subjectCoff: 0.35,\r\n      numberOfClassCoff: 0.3,\r\n      stepGen:10,\r\n      stdCoff: 0,\r\n      satisfactionSumCoff: 1.0,\r\n      distanceCoff: 0,\r\n      consicutiveClassCoff: 0,\r\n      fulltimeCoff: 0.5,\r\n\r\n        valueModel:0,\r\n        listModel:[\r\n            {\r\n                label: 'Linear Scalarization',\r\n                value: 0\r\n            },\r\n            {\r\n                label: 'Compromise Programming',\r\n                value: 1\r\n            }\r\n        ]\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters([\r\n      'name'\r\n    ])\r\n  },\r\n  watch: {\r\n\r\n      valueOptionId() {\r\n          this.yearSelected = this.listYear.filter(i => i.id === this.valueOptionId)\r\n          this.hasFile = false\r\n          this.nameFile = ''\r\n\r\n          this.getListGeneration()\r\n      },\r\n\r\n    isRunning() {\r\n      if (this.isRunning) {\r\n        this.startInterval = setInterval(this.getListGeneration, 3000)\r\n        console.log('aaa', this.startInterval)\r\n\r\n        this.$store.dispatch('request/startInterval', this.startInterval)\r\n      } else {\r\n        clearInterval(this.startInterval)\r\n      }\r\n    },\r\n\r\n    valueTeacher() {\r\n      this.listDetailGeneration = this.listFull;\r\n      this.listDetailGeneration = this.listDetailGeneration.filter(item => {\r\n        if (this.valueTeacher.length === 0) {\r\n          return true\r\n        } else {\r\n\r\n          return this.valueTeacher.includes(item.room)\r\n        }\r\n      })\r\n    },\r\n\r\n\r\n    fulltimeCoff() {\r\n      this.parttimeCoff = 1 - this.fulltimeCoff\r\n    },\r\n    parttimeCoff() {\r\n      this.fulltimeCoff = 1 - this.parttimeCoff\r\n    },\r\n    hardConstraintCoff() {\r\n      this.softConstraintCoff = 1 - this.hardConstraintCoff\r\n    },\r\n    softConstraintCoff() {\r\n      this.hardConstraintCoff = 1 - this.softConstraintCoff\r\n    },\r\n    stdCoff() {\r\n      this.satisfactionSumCoff = 1 - this.stdCoff\r\n    },\r\n    satisfactionSumCoff() {\r\n      this.stdCoff = 1 - this.satisfactionSumCoff\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.getYear()\r\n    this.getListGeneration()\r\n\r\n    this.infoUser = JSON.parse(localStorage.getItem('infoUser'))\r\n  },\r\n  methods: {\r\n    submitFile() {\r\n      const formData = new FormData()\r\n      formData.append('file', this.file)\r\n\r\n      const data = {\r\n        formData: formData,\r\n        headers: {\r\n          semesterId: this.valueOptionId,\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n          }\r\n        }\r\n      }\r\n\r\n      const messageIsNow = \"<p style='color: red'>\"+this.yearSelected[0].season.toUpperCase() +' '+ this.yearSelected[0].year +' already have data, do you want upload new data ?</p>'\r\n      const messageIsNotNow = 'Do you want upload data for '+ this.yearSelected[0].season +' '+ this.yearSelected[0].year +' khÃ´ng?'\r\n      const message = this.yearSelected[0].now && this.yearSelected[0].hasData ? messageIsNow : messageIsNotNow\r\n\r\n      this.$confirm(message, 'Warning', {\r\n        confirmButtonText: 'Confirm',\r\n        cancelButtonText: 'Cancel',\r\n          dangerouslyUseHTMLString:true,\r\n        type: 'warning'\r\n      }).then(() => {\r\n        this.loading = true\r\n        this.$store.dispatch('request/uploadFile', data).then((data) => {\r\n          this.loading = false\r\n          this.nameFile = ''\r\n          this.$notify({\r\n            title: 'Success',\r\n            message: 'Submit file success',\r\n            type: 'success',\r\n            duration: 2000\r\n          })\r\n        }).catch(() => {\r\n          this.loading = false\r\n        })\r\n      })\r\n    },\r\n\r\n\r\n    handleDataExpectedEdit() {\r\n\r\n    },\r\n\r\n\r\n    getYear() {\r\n      this.loading = true\r\n      this.$store.dispatch('expected/getListYear').then((data) => {\r\n        this.listYear = this.$store.state.expected.listYear\r\n        this.listYear.forEach(element => {\r\n          if (element.now) {\r\n            this.valueOptionId = element.id\r\n          }\r\n        })\r\n        this.yearSelected = this.listYear.filter(i => i.id === this.valueOptionId)\r\n\r\n        this.getListGeneration()\r\n\r\n\r\n      }).catch(() => {\r\n        this.loading = false\r\n      })\r\n    },\r\n\r\n    handleFileUpload() {\r\n      this.file = this.$refs.file.files[0]\r\n      this.nameFile = this.file.name\r\n      this.typeFile = this.nameFile.slice(this.nameFile.length - 5, this.nameFile.length)\r\n\r\n      if (this.typeFile === '.xlsx') {\r\n        this.isFileExcel = true\r\n        this.hasFile = true\r\n      } else {\r\n        this.isFileExcel = false\r\n        this.hasFile = false\r\n      }\r\n    },\r\n\r\n    getListGeneration() {\r\n      this.loadingGeneration = true\r\n      const postData = {\r\n        page: this.currentPage,\r\n        limit: 10\r\n      }\r\n      this.$store.dispatch('request/getListGeneration', postData).then(() => {\r\n        this.listGeneration = this.$store.state.request.listGeneration.results\r\n        this.totalCount = this.$store.state.request.listGeneration.totalCount\r\n        this.isRunning = this.$store.state.request.listGeneration.running\r\n        this.loadingGeneration = false\r\n        this.loading=false;\r\n      }).catch(() => {\r\n        this.loadingGeneration = false\r\n        this.loading=false;\r\n      })\r\n    },\r\n    sort(list) {\r\n      list.sort(function (a, b) {\r\n        const nameA = a.toUpperCase()\r\n        const nameB = b.toUpperCase()\r\n        if (nameA < nameB) {\r\n          return -1\r\n        }\r\n        if (nameA > nameB) {\r\n          return 1\r\n        }\r\n        return 0\r\n      })\r\n    },\r\n    previewGeneration(row) {\r\n      this.listTeach=[]\r\n      this.selected = row\r\n      this.dialogDetailGeneration = true\r\n      this.listDetailGeneration = row.timetableEdit\r\n      this.listFull = this.listDetailGeneration;\r\n      this.listDetailGeneration.forEach(element => {\r\n        this.listTeach.push(element.room)\r\n      })\r\n    },\r\n\r\n    startArrange() {\r\n        var data ={}\r\n        if(this.valueModel === 0) {\r\n            data = {\r\n                postData: {\r\n                    modelType:this.valueModel,\r\n                    mutationRate: parseFloat(this.mutationRate.toFixed(2)),\r\n                    populationSize: parseFloat(this.populationSize),\r\n                    tournamentSize: parseFloat(this.tournamentSize.toFixed(2)),\r\n                    convergenceCheckRange: parseFloat(this.convergenceCheckRange),\r\n                    stepGeneration: this.stepGen,\r\n                    cofficient: {\r\n                        hardConstraintCoff: parseFloat(this.hardConstraintCoff.toFixed(2)),\r\n                        softConstraintCoff: parseFloat(this.softConstraintCoff.toFixed(2)),\r\n                        parttimeCoff: parseFloat(this.parttimeCoff.toFixed(2)),\r\n                        slotCoff: parseFloat(this.slotCoff.toFixed(2)),\r\n                        subjectCoff: parseFloat(this.subjectCoff),\r\n                        numberOfClassCoff: parseFloat(this.numberOfClassCoff.toFixed(2)),\r\n                        stdCoff: parseFloat(this.stdCoff.toFixed(2)),\r\n                        satisfactionSumCoff: parseFloat(this.satisfactionSumCoff.toFixed(2)),\r\n                        distanceCoff: parseFloat(this.distanceCoff.toFixed(2)),\r\n                        fulltimeCoff: parseFloat(this.fulltimeCoff.toFixed(2))\r\n\r\n                    }\r\n                },\r\n                queryParam: {\r\n                    semesterId: this.valueOptionId\r\n                }\r\n            }\r\n        } else {\r\n              data = {\r\n                postData: {\r\n                    modelType:this.valueModel,\r\n                    mutationRate: parseFloat(this.mutationRate.toFixed(2)),\r\n                    populationSize: parseFloat(this.populationSize),\r\n                    tournamentSize: parseFloat(this.tournamentSize.toFixed(2)),\r\n                    convergenceCheckRange: parseFloat(this.convergenceCheckRange),\r\n                    stepGeneration: this.stepGen,\r\n                    cofficient: {\r\n                        hardConstraintCoff: parseFloat(this.hardConstraintCoff.toFixed(2)),\r\n                        softConstraintCoff: parseFloat(this.softConstraintCoff.toFixed(2)),\r\n                        parttimeCoff: parseFloat(this.parttimeCoff.toFixed(2)),\r\n                        fulltimeCoff: parseFloat(this.fulltimeCoff.toFixed(2))\r\n                    }\r\n\r\n                },\r\n                queryParam: {\r\n                    semesterId: this.valueOptionId\r\n                }\r\n            }\r\n        }\r\n      const sum = this.slotCoff + this.subjectCoff + this.numberOfClassCoff + this.distanceCoff\r\n      if (sum !== 1) {\r\n        Message({\r\n          message: 'Sum of SlotCoefficient,SubjectCoefficient,NumberOfClassCoefficient and DistanceCoefficient must be equal 1 !',\r\n          type: 'error',\r\n          duration: 5 * 1000\r\n        })\r\n      } else {\r\n        this.isRunning = true\r\n        this.loading = true\r\n        this.$store.dispatch('request/startArrange', data).then(() => {\r\n          this.loading = false\r\n        }).catch(() => {\r\n          this.isRunning = false\r\n          this.loading = false\r\n          this.loadingGeneration = false\r\n        })\r\n      }\r\n    },\r\n\r\n    stopArrange() {\r\n      this.loading = true\r\n      clearInterval(this.startInterval)\r\n      this.getListGeneration()\r\n      this.$store.dispatch('request/stopArrange', {}).then(() => {\r\n        this.isRunning = false\r\n        this.loading = false\r\n      }).catch(() => {\r\n        this.loadingGeneration = false\r\n      })\r\n    },\r\n\r\n    actionArrange() {\r\n      if (!this.isRunning) {\r\n        this.startArrange()\r\n\r\n      } else {\r\n        this.stopArrange()\r\n      }\r\n    },\r\n\r\n    handleCurrentChange(currentPage) {\r\n      this.currentPage = currentPage\r\n      this.getListGeneration()\r\n    },\r\n\r\n    setAsDefault() {\r\n      this.$confirm('Set default timetable for '+this.yearSelected[0].season +' '+ this.yearSelected[0].year, 'Confirm', {\r\n        confirmButtonText: 'Confirm',\r\n        cancelButtonText: 'Cancel',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        this.loading = true\r\n        this.dialogDetailGeneration = false\r\n        const postData = {\r\n          runId: this.selected.id,\r\n          semesterId: this.valueOptionId\r\n        }\r\n        this.$store.dispatch('request/setAsDefault', postData).then(() => {\r\n          this.$notify({\r\n            title: 'Success',\r\n            message: 'Set default Successfully',\r\n            type: 'success',\r\n            duration: 2000\r\n          })\r\n          this.loading = false\r\n        }).catch(() => {\r\n          this.loading = false\r\n        })\r\n      })\r\n    }\r\n  }\r\n}\r\n",null]}