{"remainingRequest":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\src\\views\\history\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\src\\views\\history\\index.vue","mtime":1591175945043},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters } from 'vuex'\nimport moment from 'moment'\n\nexport default {\n  name: 'History',\n  components: {\n  },\n  props: {\n    total: {\n      required: true,\n      type: Number\n    },\n    page: {\n      type: Number,\n      default: 1\n    },\n    limit: {\n      type: Number,\n      default: 10\n    },\n    pageSizes: {\n      type: Array,\n      default() {\n        return [10, 20, 30, 50]\n      }\n    },\n    layout: {\n      type: String,\n      default: 'total, sizes, prev, pager, next, jumper'\n    },\n    background: {\n      type: Boolean,\n      default: true\n    },\n    autoScroll: {\n      type: Boolean,\n      default: false\n    },\n    hidden: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      loading: false,\n      property: 'Blank',\n      valueOptionId: '',\n      userInfo: JSON.parse(localStorage.getItem('infoUser')),\n      idYear: '',\n      listYear: [],\n      infoUser: {},\n      listReport: [],\n      dialogFormAdd: false,\n      dialogFormReply: false,\n      form: {\n        purpose: ''\n      },\n      formReply: {\n        id: '',\n        purpose: '',\n        reply: ''\n      },\n      rules: {\n        purpose: [{ required: true, message: 'Purpose is required.', trigger: 'change' }],\n        reply: [{ required: true, message: 'Reply is required.', trigger: 'change' }]\n      },\n      valueEmail: '',\n      dataListEmail: [\n        {\n          value: '',\n          title: 'All Email'\n        }\n      ],\n      currentPage: 1,\n      pageSize: 5,\n      total: 0,\n      limit: 10,\n      pageSizes: {\n        type: Array,\n        default() {\n          return [10, 20, 30, 50]\n        }\n      }\n    }\n  },\n\n  computed: {\n    ...mapGetters([\n      'name'\n    ])\n  },\n\n  watch: {\n    valueOptionId() {\n      this.getListReport()\n    },\n    valueEmail() {\n      this.getListReport(this.valueEmail)\n    }\n  },\n\n  created() {\n    this.getYear()\n  },\n\n  methods: {\n    format_date(value) {\n      if (value) {\n        return moment(String(value)).format('YYYY/MM/DD')\n      }\n    },\n    handleChange(value) {\n    },\n\n    getYear() {\n      this.$store.dispatch('expected/getListYear').then((data) => {\n        this.listYear = this.$store.state.expected.listYear\n        this.listYear.forEach(element => {\n          if (element.now) {\n            this.valueOptionId = element.id\n            this.getListEmail()\n          }\n        })\n        this.getListReport()\n      }).catch(() => {\n        this.loading = false\n      })\n    },\n    getListEmail() {\n      if (this.userInfo.role.roleName !== 'ROLE_ADMIN') {\n        var paramQuery = {\n          'criteria': {\n            'semester': {\n              'id': this.valueOptionId\n            },\n            'lecturer': {\n              'googleId': this.userInfo.googleId, // user đang đăng nhập\n              'email': this.valueEmail\n            }\n          },\n          'sortField': 'status',\n          'ascending': true\n        }\n      } else {\n        var paramQuery = {\n          'criteria': {\n            'semester': {\n              'id': this.valueOptionId\n            },\n            'lecturer': {\n              'department': this.userInfo.department,\n              'email': this.valueEmail\n            }\n          },\n          'sortField': 'status',\n          'ascending': true\n        }\n      }\n      this.$store.dispatch('report/getListReport', paramQuery).then(() => {\n        var data = this.$store.state.report.listReport.results\n        const newData = data.map((item, index) => {\n          return item.lecturer\n        })\n        const unique = [...new Set(newData.map(item => item.email))]\n        const newDataa = unique.map((item, index) => {\n          return {\n            title: item,\n            value: item\n          }\n        })\n        this.dataListEmail = newDataa\n      }).catch(() => {\n      })\n    },\n    getListReport(email) {\n      this.loading = true\n      if (this.userInfo.role.roleName !== 'ROLE_ADMIN') {\n        var paramQuery = {\n          page: email ? 0 : this.currentPage,\n          limit: this.limit,\n          'criteria': {\n            'semester': {\n              'id': this.valueOptionId\n            },\n            'lecturer': {\n              'googleId': this.userInfo.googleId, // user đang đăng nhập\n              'email': this.valueEmail\n            }\n          },\n          'sortField': 'status',\n          'ascending': false\n        }\n      } else {\n        var paramQuery = {\n          page: email ? 0 : this.currentPage,\n          limit: this.limit,\n          'criteria': {\n            'semester': {\n              'id': this.valueOptionId\n            },\n            'lecturer': {\n              'department': this.userInfo.department,\n              'email': this.valueEmail\n            }\n          },\n          'sortField': 'status',\n          'ascending': false\n        }\n      }\n      this.$store.dispatch('report/getListReport', paramQuery).then(() => {\n        this.listReport = this.$store.state.report.listReport.results\n        this.total = this.$store.state.report.listReport.totalCount\n        this.loading = false\n      }).catch(() => {\n        this.loading = false\n      })\n    },\n    handleCreate() {\n      this.dialogFormAdd = true\n    },\n    addData() {\n      this.form.purpose = this.form.purpose.trim()\n      this.$refs['dataFormAdd'].validate((valid) => {\n        const postData = {\n          'content': this.form.purpose.trim()\n        }\n\n        if (valid && this.form.purpose.trim()) {\n          this.dialogFormAdd = false\n          this.loading = true\n          this.$store.dispatch('report/addReport', postData).then(() => {\n            this.$notify({\n              title: 'Success',\n              message: 'Update Successfully',\n              type: 'success',\n              duration: 2000\n            })\n            this.getListReport()\n          })\n        }\n      })\n    },\n    reply(row, status) {\n      this.dialogFormReply = true\n      this.formReply.purpose = row.content\n      this.formReply.id = row.id\n    },\n    changeReport(status) {\n      this.formReply.reply = this.formReply.reply.trim()\n      this.$refs['dialogFormReply'].validate((valid) => {\n        const postData = {\n          'id': this.formReply.id,\n          'replyContent': this.formReply.reply,\n          'status': status\n        }\n        if (valid) {\n          this.dialogFormReply = false\n          this.$store.dispatch('report/approveReport', postData).then(() => {\n            this.$notify({\n              title: 'Success',\n              message: 'Update Successfully',\n              type: 'success',\n              duration: 2000\n            })\n            this.getListReport()\n          })\n        }\n      })\n    },\n    handleSizeChange(val) {\n      this.limit = val\n      this.getListReport()\n    },\n    handleCurrentChange(val) {\n      this.currentPage = val\n      this.getListReport()\n    }\n  }\n}\n",null]}