{"remainingRequest":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\src\\views\\manage\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\src\\views\\manage\\index.vue","mtime":1590593915856},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ListRadio from '@/components/ListRadio'\n\nexport default {\n  name: 'Dashboard',\n  components: {\n    ListRadio\n  },\n  filters: {\n    statusFilter(status) {\n      const statusMap = {\n        published: 'success',\n        draft: 'gray',\n        deleted: 'danger'\n      }\n      return statusMap[status]\n    }\n  },\n  props: {\n    total: {\n      required: true,\n      type: Number\n    },\n    page: {\n      type: Number,\n      default: 1\n    },\n    limit: {\n      type: Number,\n      default: 10\n    },\n    pageSizes: {\n      type: Array,\n      default() {\n        return [10, 20, 30, 50]\n      }\n    },\n    layout: {\n      type: String,\n      default: 'total, sizes, prev, pager, next, jumper'\n    },\n    background: {\n      type: Boolean,\n      default: true\n    },\n    autoScroll: {\n      type: Boolean,\n      default: false\n    },\n    hidden: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      list: [],\n      listLoading: true,\n      temp: {\n        googleId: '',\n        fullName: '',\n        email: '',\n        phone: '',\n        shortName: '',\n        quotaClass: '',\n        fillingExpected: '',\n        headOfDepartment: '',\n        department: 'CF',\n        fullTime: false,\n        active: false\n      },\n      yearSelected:{},\n      emailAdd: {\n        email: ''\n      },\n      dialogFormVisible: false,\n      dialogFormAdd: false,\n      dialogFormexpected: false,\n      dialogStatus: '',\n      textMap: {\n        update: 'Edit lecturer\\'s information :',\n        create: 'Add new lecturer'\n      },\n      listStatus: [\n        {\n          'label': 'Activated',\n          'value': 0\n        },\n        {\n          'label': 'Deactivated',\n          'value': 1\n        }\n      ],\n      rules: {\n        fullName: [{ required: true, message: 'Name is required.', trigger: 'change' }],\n        shortName: [{ required: true, message: 'Short Name is required.', trigger: 'change' }],\n        email: [{ type: 'email', required: true, message: 'Email is required', trigger: 'change' }],\n      },\n      emailAddRule: {\n        email: [{ type: 'email', required: true, message: 'Email is required', trigger: 'change' }]\n      },\n      property: 'Blank',\n      textarea: '',\n      textareaNote: '',\n      note: '',\n      valueOption: '',\n      valueOptionStatus: 0,\n      idYear: '',\n      listYear: [],\n      infoUser: {},\n      expectedSubjects: [],\n      expectedSlots: [],\n      expectedNote: {},\n      dataExpectedEdit: {\n        expectedSubjects: [],\n        expectedSlots: [],\n        expectedNote: {}\n      },\n      isEdit: false,\n      dataListEmail: [\n        {\n          value: '',\n          title: 'All Email'\n        }\n      ],\n      currentRow: {},\n      currentPage: 1,\n      pageSize: 5,\n      total: 0,\n      limit: 10,\n      pageSizes: {\n        type: Array,\n        default() {\n          return [10, 20, 30, 50]\n        }\n      },\n      valueEmail: '',\n      listLoadingRadio: false,\n      isActive: true\n    }\n  },\n  watch: {\n    valueOption() {\n      this.getDataExpected()\n    },\n    valueOptionStatus() {\n      this.getListEmail()\n      if (this.valueOptionStatus === 0) {\n        this.isActive = true\n\n      } else {\n        this.isActive = false\n      }\n      setTimeout(()=>{\n        this.fetchData(this.valueOptionStatus, this.valueEmail)\n      }, 300)\n    },\n    valueEmail() {\n      setTimeout(()=>{\n        this.fetchData(this.valueOptionStatus, this.valueEmail)\n      }, 300);\n    }\n  },\n  created() {\n    this.fetchData()\n    this.getListEmail()\n  },\n  methods: {\n    tableRowClassName({ row, rowIndex }) {\n      if (row.status === 'DEACTIVATE') {\n        return 'warning-row'\n      }\n    },\n    async logout() {\n      await this.$store.dispatch('user/logout')\n      localStorage.removeItem('infoUser')\n      this.$router.push(`/login?redirect=${this.$route.fullPath}`)\n    },\n    handleChange(value) {\n    },\n    getYear() {\n      this.$store.dispatch('expected/getListYear').then((data) => {\n        this.listYear = this.$store.state.expected.listYear\n        this.listYear.forEach(element => {\n          if (element.now) {\n            this.valueOption = element.id\n          }\n        })\n      }).catch(() => {\n      })\n    },\n    changStatus(row, status) {\n      const data = {\n        params: {\n          'status': status\n        },\n        'lecturerGoogleId': row.googleId\n      }\n      if (status === 'DEACTIVATE') {\n        this.$confirm('Will remove timetable of lecturer : \\'<strong>'+row.email+'</strong>\\' in current semester (if exist)?', 'Warning', {\n        iconColor:\"red\",\n          dangerouslyUseHTMLString:true,\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        type: 'DEACTIVATE'\n      })\n        .then(async() => {\n          this.callAPIChangeStatus(data)\n        })\n      } else {\n        this.callAPIChangeStatus(data)\n      }\n    },\n    callAPIChangeStatus(data) {\n      this.$store.dispatch('manager/changeStatus', data).then(() => {\n        this.fetchData()\n        this.listLoading = false\n        this.$notify({\n          title: 'Success',\n          message: 'Change status successfully',\n          type: 'success',\n          duration: 2000\n        })\n        }).catch(() => {\n          this.listLoading = false\n      })\n    },\n    getListEmail() {\n      this.list = [];\n      this.infoUser = JSON.parse(localStorage.getItem('infoUser'))\n\n        var data = {\n        page: 0,\n        limit: this.limit,\n        criteria : {\n          role :{\n            id : 2\n          },\n          department: this.infoUser.department,\n          email: this.valueEmail,\n          status : this.valueOptionStatus\n        },\n          'sortField': 'email',\n          'ascending': false\n\n      }\n      this.$store.dispatch('manager/getListUser',data).then((data) => {\n        var data = this.$store.state.manager.listUser.results\n        this.dataListEmail = [\n          {\n            value: '',\n            title: 'All Email'\n          }\n        ],\n        data.forEach(element => {\n          this.dataListEmail.push({\n            'title': element.email,\n            'value': element.email\n          }\n          )\n        })\n      }).catch(() => {\n      })\n    },\n    fetchData(status, email) {\n      this.infoUser = JSON.parse(localStorage.getItem('infoUser'))\n      this.listLoading = true\n      if (this.valueOptionStatus === 'ALL') {\n        var data = {\n          page: (email || status) ? 0 : this.currentPage,\n          limit: this.limit,\n          criteria : {\n            role :{\n              id : 2\n            },\n            department: this.infoUser.department,\n            email: email\n          },\n          'sortField': 'email',\n          'ascending': true\n        }\n      } else {\n        var data = {\n        page: (email || status) ? 0 : this.currentPage,\n        limit: this.limit,\n        criteria : {\n          role :{\n            id : 2\n          },\n          department: this.infoUser.department,\n          status: this.valueOptionStatus,\n          email: email\n        },\n          'sortField': 'email',\n          'ascending': true\n       }\n      }\n      this.$store.dispatch('manager/getListUser',data).then((data) => {\n        this.list = this.$store.state.manager.listUser.results\n        this.total = this.$store.state.manager.listUser.totalCount\n        this.listLoading = false\n      }).catch(() => {\n        this.listLoading = false\n      })\n    },\n    handleHOD(row) {\n      this.$confirm('Do you really want to transfer Head of Department role to lecturer : \\'<strong>'+row.email+'</strong>\\' ?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        dangerouslyUseHTMLString:true,\n        type: 'warning',\n        title:'TRANSFER ROLE'\n      })\n        .then(async() => {\n          this.listLoading = true\n          const paramQuery = {\n            lecturerGoogleId: row.googleId\n          }\n          this.$store.dispatch('manager/changeHOD', paramQuery).then(() => {\n            this.listLoading = false\n            this.logout()\n            const startInterval = this.$store.state.startInterval\n            clearInterval(startInterval)\n          }).catch(() => {\n            this.listLoading = false\n          })\n        })\n    },\n    handleDelete(row, index) {\n      this.$confirm('Do you really want to delete lecturer : \\'<strong>'+row.email+'</strong>\\' ?', 'Warning', {\n        confirmButtonText: 'Confirm',\n        cancelButtonText: 'Cancel',\n        dangerouslyUseHTMLString:true,\n        type: 'warning'\n      })\n        .then(async() => {\n          this.listLoading = true\n          this.$store.dispatch('manager/deleteUser', row.id).then(() => {\n            this.$notify({\n              title: 'Success',\n              message: 'Delete Successfully',\n              type: 'success',\n              duration: 2000\n            })\n            this.list.splice(index, 1)\n            this.listLoading = false\n          }).catch(() => {\n            this.listLoading = false\n          })\n        })\n    },\n    info(row) {\n      this.temp = Object.assign({}, row) // copy obj\n      this.dialogStatus = 'update'\n      this.dialogFormVisible = true\n    },\n    infoexpected(row) {\n      this.currentRow = row\n      this.dialogFormexpected = true\n      this.getYear()\n      this.getDataExpected()\n    },\n    handleCreate() {\n      this.dialogStatus = 'create'\n      this.dialogFormAdd = true\n    },\n    updateData() {\n      const regexPhoneNumber = /((0)+([0-9]{9}))/g\n      this.$refs['dataForm'].validate((valid) => {\n        const isValidPhone = regexPhoneNumber.test(this.temp.phone) || !this.temp.phone && !regexPhoneNumber.test(this.temp.phone)\n        if (valid && isValidPhone) {\n          this.$store.dispatch('manager/updateUser', this.temp).then(() => {\n            this.fetchData(this.valueOptionStatus, this.valueEmail)\n            this.dialogFormVisible = false\n            this.$notify({\n              title: 'Success',\n              message: 'Update Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          })\n        }\n\n        if (!isValidPhone) {\n          this.$confirm('Số điện thoại không đúng định dạng.', 'Warning', {\n            confirmButtonText: 'Ok',\n            cancelButtonText: 'Cancel',\n            dangerouslyUseHTMLString: true,\n            type: 'warning'\n          })\n        }\n      })\n    },\n\n    addData() {\n      this.$refs['dataFormAdd'].validate((valid) => {\n        if (valid) {\n          this.$store.dispatch('manager/addUser', this.emailAdd).then(() => {\n            this.fetchData()\n            this.dialogFormAdd = false\n            this.$notify({\n              title: 'Success',\n              message: 'Created Successfully',\n              type: 'success',\n              duration: 2000\n            })\n              this.getListEmail();\n            this.emailAdd = {\n              email: ''\n            }\n            this.$refs['dataFormAdd'].resetFields()\n          }).catch((err) => {\n          })\n        } else {\n          return false\n        }\n      })\n    },\n    handleDataExpectedEdit(data) {\n      if (data.isSubject) {\n        const indexOfSubject = this.dataExpectedEdit.expectedSubjects.findIndex(item => item.name === data.value.name)\n        if (indexOfSubject && indexOfSubject === -1) {\n          this.dataExpectedEdit.expectedSubjects.push(data.value)\n        } else {\n          this.dataExpectedEdit.expectedSubjects[indexOfSubject].levelOfPrefer = data.value.levelOfPrefer\n        }\n      } else {\n        const indexOfSlot = this.dataExpectedEdit.expectedSlots.findIndex(item => item.name === data.value.name)\n        if (indexOfSlot && indexOfSlot === -1) {\n          this.dataExpectedEdit.expectedSlots.push(data.value)\n        } else {\n          this.dataExpectedEdit.expectedSlots[indexOfSlot].levelOfPrefer = data.value.levelOfPrefer\n        }\n      }\n    },\n    sort(list) {\n      list.sort(function(a, b) {\n        const nameA = a.name.toUpperCase()\n        const nameB = b.name.toUpperCase()\n        if (nameA < nameB) {\n          return -1\n        }\n        if (nameA > nameB) {\n          return 1\n        }\n        return 0\n      })\n    },\n    getDataExpected() {\n\n      this.expectedSlots = []\n      this.yearSelected = this.listYear.filter(i => i.id === this.valueOption)\n      if (!this.yearSelected[0].hasData) {\n        return;\n      }\n      this.listLoading = true;\n      this.dataExpectedEdit = {\n        expectedSubjects: [],\n        expectedSlots: [],\n        expectedNote: {}\n      }\n      const paramQuery = {\n        lecturerId: this.currentRow.googleId,\n        semesterId: this.valueOption\n      }\n      this.$store.dispatch('expected/getDataExpected', paramQuery).then((data) => {\n        this.expectedSubjects = this.$store.state.expected.dataExpected.expectedSubjects\n        if (this.$store.state.expected.dataExpected.expectedSlots) {\n          const slot = ['M1', 'M2', 'M3', 'E1', 'E2', 'E3', 'M4', 'M5', 'E4', 'E5']\n          const dataTemp = this.$store.state.expected.dataExpected.expectedSlots\n          slot.forEach(element => {\n            dataTemp.forEach(item => {\n              if (element === item.name) {\n                this.expectedSlots.push(item)\n              }\n            })\n          })\n        } else {\n          this.expectedSlots = []\n        }\n\n        if (this.$store.state.expected.dataExpected.expectedSubjects) {\n          this.expectedSubjects = this.$store.state.expected.dataExpected.expectedSubjects\n          this.sort(this.expectedSubjects)\n        } else {\n          this.expectedSubjects = []\n        }\n\n        if (this.$store.state.expected.dataExpected.expectedNote) {\n          this.expectedNote = this.$store.state.expected.dataExpected.expectedNote\n        } else {\n          this.expectedNote = {}\n        }\n        this.listLoading = false;\n      }).catch(() => {\n      })\n    },\n    reuseExpected() {\n\n      const paramQuery = {\n        lecturerGoogleId: this.currentRow.googleId,\n        semesterId: this.valueOption\n      }\n      this.$store.dispatch('expected/reuseExected', paramQuery).then((data) => {\n        this.getDataExpected()\n        this.fetchData()\n        this.$notify({\n          title: 'Success',\n          message: 'Update Successfully',\n          type: 'success',\n          duration: 2000\n        })\n      }).catch(() => {\n        this.loading = false\n      })\n    },\n    saveExected() {\n      this.dataExpectedEdit.expectedNote.expectedNumOfClass = this.expectedNote.expectedNumOfClass\n      this.dataExpectedEdit.expectedNote.maxConsecutiveSlot = this.expectedNote.maxConsecutiveSlot\n      this.dataExpectedEdit.expectedNote.note = this.expectedNote.note\n      this.dataExpectedEdit.lecturer = {\n        googleId: this.currentRow.googleId\n      }\n      this.dataExpectedEdit.semester = {\n        id: this.valueOption\n      }\n      this.dataExpectedEdit.method = 'post'\n      if (this.$store.state.expected.dataExpected.id !== 0) {\n        this.dataExpectedEdit.method = 'put'\n        this.dataExpectedEdit.id = this.$store.state.expected.dataExpected.id\n      }\n      this.$store.dispatch('expected/saveDataExpected', this.dataExpectedEdit).then((data) => {\n        this.isEdit = false\n        this.dataExpectedEdit = {\n          expectedSubjects: [],\n          expectedSlots: [],\n          expectedNote: {}\n        }\n        this.getDataExpected()\n        this.fetchData()\n        this.$notify({\n          title: 'Success',\n          message: 'Update Successfully',\n          type: 'success',\n          duration: 2000\n        })\n      }).catch(() => {\n      })\n    },\n    editExpected() {\n      this.isEdit = true\n    },\n    handleSizeChange(val) {\n      console.log('val', val)\n      // this.$emit('pagination', { page: this.currentPage, limit: val })\n      this.limit = val\n      this.fetchData()\n    },\n    handleCurrentChange(val) {\n      // this.$emit('pagination', { page: val, limit: this.pageSize })\n      this.currentPage = val\n      this.fetchData()\n    }\n  }\n}\n",null]}