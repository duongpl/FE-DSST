{"remainingRequest":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\src\\views\\request\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\src\\views\\request\\index.vue","mtime":1589868463109},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { mapGetters } from 'vuex'\r\nimport moment from 'moment'\r\n\r\nexport default {\r\n  name: 'Report',\r\n  components: {\r\n  },\r\n    props: {\r\n    total: {\r\n      required: true,\r\n      type: Number\r\n    },\r\n    page: {\r\n      type: Number,\r\n      default: 1\r\n    },\r\n    limit: {\r\n      type: Number,\r\n      default: 10\r\n    },\r\n    pageSizes: {\r\n      type: Array,\r\n      default() {\r\n        return [10, 20, 30, 50]\r\n      }\r\n  },\r\n  layout: {\r\n      type: String,\r\n      default: 'total, sizes, prev, pager, next, jumper'\r\n    },\r\n    background: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    autoScroll: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    hidden: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      loading: false,\r\n      property: 'Blank',\r\n      valueOptionId: '',\r\n      userInfo: JSON.parse(localStorage.getItem('infoUser')),\r\n      idYear: '',\r\n      listYear: [],\r\n      infoUser: {},\r\n      listReport: [],\r\n      dialogFormAdd: false,\r\n      dialogFormReply: false,\r\n      form: {\r\n        purpose: ''\r\n      },\r\n      formReply: {\r\n        id: '',\r\n        purpose: '',\r\n        reply: ''\r\n      },\r\n      rules: {\r\n        purpose: [{ required: true, message: 'Purpose is required.', trigger: 'change' }],\r\n        reply: [{ required: true, message: 'Reply is required.', trigger: 'change' }]\r\n      },\r\n      valueEmail: '',\r\n      dataListEmail: [\r\n        {\r\n          value: '',\r\n          title: 'All Email'\r\n        }\r\n      ],\r\n      currentPage: 1,\r\n      pageSize: 5,\r\n      total: 0,\r\n      limit: 10,\r\n      pageSizes: {\r\n        type: Array,\r\n        default() {\r\n          return [10, 20, 30, 50]\r\n        }\r\n      },\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    ...mapGetters([\r\n      'name'\r\n    ])\r\n  },\r\n\r\n  watch: {\r\n    valueOptionId() {\r\n      this.getListReport()\r\n    },\r\n    valueEmail() {\r\n      this.getListReport(this.valueEmail)\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.getYear()\r\n  },\r\n\r\n  methods: {\r\n    format_date(value) {\r\n      if (value) {\r\n        return moment(String(value)).format('YYYY/MM/DD')\r\n      }\r\n    },\r\n    handleChange(value) {\r\n    },\r\n\r\n    getYear() {\r\n      this.$store.dispatch('expected/getListYear').then((data) => {\r\n        this.listYear = this.$store.state.expected.listYear\r\n        this.listYear.forEach(element => {\r\n          if (element.now) {\r\n            this.valueOptionId = element.id\r\n             this.getListEmail()\r\n          }\r\n        })\r\n        this.getListReport()\r\n\r\n      }).catch(() => {\r\n        this.loading = false\r\n      })\r\n    },\r\n       getListEmail() {\r\n      if (this.userInfo.role.roleName !== 'ROLE_ADMIN') {\r\n        var paramQuery = {\r\n          'criteria': {\r\n            'semester': {\r\n              'id': this.valueOptionId\r\n            },\r\n            'lecturer': {\r\n              'googleId': this.userInfo.googleId, //user đang đăng nhập\r\n              'email': this.valueEmail\r\n            },\r\n          },\r\n          'sortField': 'status',\r\n          'ascending': true\r\n        }\r\n      } else {\r\n        var paramQuery = {\r\n          'criteria': {\r\n            'semester': {\r\n              'id': this.valueOptionId\r\n            },\r\n            'lecturer': {\r\n              'department': this.userInfo.department,\r\n              'email': this.valueEmail\r\n            }\r\n          },\r\n          'sortField': 'status',\r\n          'ascending': true\r\n        }\r\n      }\r\n        this.$store.dispatch('report/getListReport', paramQuery).then(() => {\r\n        var data = this.$store.state.report.listReport.results\r\n        const newData = data.map((item, index) => {\r\n          return item.lecturer;\r\n        });\r\n        const unique = [...new Set(newData.map(item => item.email))];\r\n        const newDataa = unique.map((item, index) => {\r\n          return {\r\n            title: item,\r\n            value: item\r\n          };\r\n        });\r\n        this.dataListEmail = newDataa;\r\n      }).catch(() => {\r\n      })\r\n    },\r\n    getListReport(email) {\r\n      this.loading = true\r\n      if (this.userInfo.role.roleName !== 'ROLE_ADMIN') {\r\n        var paramQuery = {\r\n          page: email ? 0 : this.currentPage,\r\n          limit: this.limit,\r\n          'criteria': {\r\n            'semester': {\r\n              'id': this.valueOptionId\r\n            },\r\n            'lecturer': {\r\n              'googleId': this.userInfo.googleId,//user đang đăng nhập\r\n              'email': this.valueEmail\r\n            },\r\n          },\r\n          'sortField': 'status',\r\n          'ascending': false\r\n        }\r\n      } else {\r\n        var paramQuery = {\r\n          page: email ? 0 : this.currentPage,\r\n          limit: this.limit,\r\n          'criteria': {\r\n            'semester': {\r\n              'id': this.valueOptionId\r\n            },\r\n            'lecturer': {\r\n              'department': this.userInfo.department,\r\n              'email': this.valueEmail\r\n            }\r\n          },\r\n          'sortField': 'status',\r\n          'ascending': false\r\n        }\r\n      }\r\n      this.$store.dispatch('report/getListReport', paramQuery).then(() => {\r\n        this.listReport = this.$store.state.report.listReport.results\r\n        this.total = this.$store.state.report.listReport.totalCount\r\n        this.loading = false\r\n      }).catch(() => {\r\n        this.loading = false\r\n      })\r\n    },\r\n    handleCreate() {\r\n      this.dialogFormAdd = true\r\n    },\r\n    addData() {\r\n      this.form.purpose = this.form.purpose.trim()\r\n      this.$refs['dataFormAdd'].validate((valid) => {\r\n        const postData = {\r\n          'content': this.form.purpose.trim()\r\n        }\r\n\r\n        if (valid && this.form.purpose.trim()) {\r\n            this.dialogFormAdd = false\r\n            this.loading = true\r\n            this.$store.dispatch('report/addReport', postData).then(() => {\r\n              this.$notify({\r\n                title: 'Success',\r\n                message: 'Update Successfully',\r\n                type: 'success',\r\n                duration: 2000\r\n              })\r\n              this.getListReport()\r\n            })\r\n\r\n        }\r\n      })\r\n    },\r\n    reply(row, status) {\r\n      this.dialogFormReply = true\r\n      this.formReply.purpose = row.content\r\n      this.formReply.id = row.id\r\n    },\r\n    changeReport(status) {\r\n      this.formReply.reply = this.formReply.reply.trim()\r\n      this.$refs['dialogFormReply'].validate((valid) => {\r\n        const postData = {\r\n          'id': this.formReply.id,\r\n          'replyContent': this.formReply.reply,\r\n          'status': status\r\n        }\r\n        if (valid ) {\r\n          this.dialogFormReply = false\r\n          this.$store.dispatch('report/approveReport', postData).then(() => {\r\n            this.$notify({\r\n              title: 'Success',\r\n              message: 'Update Successfully',\r\n              type: 'success',\r\n              duration: 2000\r\n            })\r\n            this.getListReport()\r\n          })\r\n        }\r\n      })\r\n    },\r\n     handleSizeChange(val) {\r\n      this.limit = val\r\n      this.getListReport()\r\n    },\r\n    handleCurrentChange(val) {\r\n      this.currentPage = val\r\n      this.getListReport()\r\n    }\r\n  }\r\n}\r\n",null]}