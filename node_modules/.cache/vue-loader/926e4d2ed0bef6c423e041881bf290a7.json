{"remainingRequest":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\src\\views\\arrange\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\src\\views\\arrange\\index.vue","mtime":1590592273159},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\DUONG\\Desktop\\managetimetable_webapp\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport TableCustom from '@/components/TableCustom'\n\nexport default {\n  name: 'Arrange',\n  components: {\n    TableCustom\n  },\n\n  data() {\n    return {\n      slot: ['M1', 'M2', 'M3', 'E1', 'E2', 'E3', 'M4', 'M5', 'E4', 'E5'],\n      loading: true,\n      optionId: '',\n      listYear: [],\n      listSlot: [],\n      dataDetail: {},\n      dataListRoom: [],\n      dataListClass: [],\n      dataListLecturer: [],\n      dataListSubject: [],\n      modelRoom: '',\n      valueTeacher: [],\n      valueClass: [],\n      valueRoom: [],\n      valueSubject: [],\n      modelClass: '',\n      modelLecturer: '',\n      modelSubject: '',\n      isEdit: false,\n      dataListTeacherDetail: [],\n      // dataListClassDetail: [],\n      listTeacherConfirm: [],\n      groupBy: 'lecturer',\n      dataSwap: [],\n      isSwap: false,\n      listId: [],\n      lecturerForSwap: [],\n      roomForSwap: [],\n      idTimetableSwap: '',\n      listStatus: [\n        {\n          'label': 'FINAL',\n          'value': 'FINAL'\n        },\n        {\n          'label': 'PUBLIC',\n          'value': 'PUBLIC'\n        },\n        {\n          'label': 'REJECT',\n          'value': 'REJECT'\n        },\n        {\n          'label': 'DRAFT',\n          'value': 'DRAFT'\n        }\n      ],\n      valueStatus: '',\n      listSlotExpectedView: [],\n      listSubjectExpectedView: [],\n      listSlotExpectedViewTemp: [],\n      listSubjectExpectedViewTemp: [],\n      // eslint-disable-next-line no-dupe-keys,vue/no-dupe-keys\n      dataListSubject: [],\n      yearSelected: [],\n      dialogViewAll: false,\n      lecturerExpected: [],\n      listLecturerExpected: [],\n      listFull: []\n    }\n  },\n\n  watch: {\n    lecturerExpected() {\n      this.listSlotExpectedView = this.listSlotExpectedViewTemp.filter(item => {\n        if (this.lecturerExpected.length === 0) {\n          return true\n        } else {\n          return this.lecturerExpected.includes(item.lecturerName)\n        }\n      })\n      this.listSubjectExpectedView = this.listSubjectExpectedViewTemp.filter(item => {\n        if (this.lecturerExpected.length === 0) {\n          return true\n        } else {\n          return this.lecturerExpected.includes(item.lecturerName)\n        }\n      })\n    },\n    groupBy() {\n      this.getDataListSlot()\n    },\n    valueTeacher() {\n      // eslint-disable-next-line no-unused-vars\n      const heightHeader = document.querySelector('.arrange-header').offsetWidth\n      this.listTeacherConfirm = this.dataListLecturer.filter(item => {\n        return this.valueTeacher.includes(item.shortName)\n      })\n    },\n    optionId() {\n      this.yearSelected = this.listYear.filter(i => i.id === this.optionId)\n      if (!this.yearSelected[0].hasData) {\n        return\n      }\n      // eslint-disable-next-line no-sequences\n      this.lecturerExpected = [],\n      this.getDataListSubject()\n      this.getDataListRoom()\n      this.getDataListClass()\n      this.getDataListLecturer()\n      this.getDataListSlot()\n\n      this.getListSlotExpForView()\n      this.getListSubjectExpForView()\n    }\n  },\n\n  created() {\n    this.infoUser = JSON.parse(localStorage.getItem('infoUser'))\n    this.getYear()\n  },\n\n  methods: {\n    getYear() {\n      this.loading = true\n      this.$store.dispatch('expected/getListYear').then((data) => {\n        this.listYear = this.$store.state.expected.listYear\n        this.listYear.forEach(element => {\n          if (element.now) {\n            this.optionId = element.id\n          }\n        })\n        this.yearSelected = this.listYear.filter(i => i.id === this.optionId)\n        if (!this.yearSelected[0].hasData) {\n          return\n        }\n        this.getDataListLecturer()\n        this.getDataListSlot()\n        this.getDataListSubject()\n        this.getDataListRoom()\n        this.getDataListClass()\n\n        this.getListSlotExpForView()\n        this.getListSubjectExpForView()\n      }).catch(() => {\n        this.loading = false\n      })\n    },\n\n    getDataListSubject() {\n      const data = {\n        params: {\n          semesterId: this.optionId\n        },\n        postData: {}\n      }\n      this.$store.dispatch('arrange/getDataSubject', data).then((data) => {\n        this.dataListSubject = this.$store.state.arrange.dataListSubject\n      }).catch(() => {\n        this.loading = false\n      })\n    },\n    getListForSwap() {\n      const newArray = this.listSlot.flatMap(x => x.timetable)\n      this.lecturerForSwap = newArray.filter(i => i.slot === this.dataDetail.slot && i.lecturerShortName !== ' NOT_ASSIGN' &&\n          i.lecturerShortName !== this.dataDetail.lecturerShortName)\n    },\n    getListForSwapRoom() {\n      const newArray = this.listSlot.flatMap(x => x.timetable)\n      this.roomForSwap = newArray.filter(i => i.slot === this.dataDetail.slot && i.room !== 'NOT_ASSIGN' &&\n              i.room !== this.dataDetail.room)\n    },\n    swap(type) {\n      const lecturerPublic = []\n      const newArray = this.listSlot.flatMap(x => x.timetable)\n      const timetableDetail = newArray.filter(x => x.id === this.idTimetableSwap)[0]\n\n      if (timetableDetail.timetableStatus !== 'DRAFT') {\n        lecturerPublic.push(timetableDetail.lecturerShortName)\n      }\n      if (this.dataDetail.timetableStatus !== 'DRAFT') {\n        lecturerPublic.push(this.dataDetail.lecturerShortName)\n      }\n      const data = {\n        postData: [this.dataDetail.id, this.idTimetableSwap],\n        params: {\n          type: type\n        }\n\n      }\n      if (lecturerPublic.length > 0 && type === 'LECTURER') {\n        this.$confirm('Timetable status  of lecturer <strong> \\' ' + lecturerPublic + '\\'</strong> is not <span style=\"color: #409EFF;\"> DRAFT</span>,  you must send request again after edit. Do you still want edit?', 'Warning', {\n          confirmButtonText: 'YES',\n          cancelButtonText: 'NO',\n          dangerouslyUseHTMLString: true,\n          type: 'warning'\n        }).then(async() => {\n          this.$store.dispatch('arrange/swapData', data).then(() => {\n            this.getListForSwap()\n            this.getListForSwapRoom()\n            this.resetModifier()\n            this.$notify({\n              title: 'Success',\n              message: 'Swap Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          })\n        })\n      } else {\n        this.$store.dispatch('arrange/swapData', data).then(() => {\n          this.getListForSwap()\n          this.getListForSwapRoom()\n          this.resetModifier()\n          this.$notify({\n            title: 'Success',\n            message: 'Swap Successfully',\n            type: 'success',\n            duration: 2000\n          })\n        })\n      }\n    },\n\n    resetModifier() {\n      this.idTimetableSwap = ''\n      this.modelLecturer = ''\n      this.modelRoom = ''\n      this.getDataListSlot()\n      this.isEdit = false\n      this.getDataListLecturer()\n    },\n    saveCalendar() {\n      const postData = {\n        id: this.dataDetail.id,\n        lecturerShortName: this.modelLecturer,\n        room: this.modelRoom\n      }\n      const lecturerPublic = []\n      const timetable = this.dataListTeacherDetail.filter(x => x.shortName === this.modelLecturer && x.timetableStatus !== 'DRAFT' && x.shortName !== 'NOT_ASSIGN')\n      if (timetable.length > 0) {\n        lecturerPublic.push(timetable[0].shortName)\n      }\n      if (this.dataDetail.timetableStatus !== 'DRAFT') {\n        lecturerPublic.push(this.dataDetail.lecturerShortName)\n      }\n\n      if (lecturerPublic.length > 0) {\n        this.$confirm('Timetable status  of lecturer <strong> \\' ' + lecturerPublic + '\\'</strong> is not <span style=\"color: #409EFF;\"> DRAFT</span>' +\n          ' ,  you must send request again after edit. Do you still want edit?', 'Warning', {\n          confirmButtonText: 'YES',\n          cancelButtonText: 'NO',\n          dangerouslyUseHTMLString: true,\n          type: 'warning'\n        })\n          .then(async() => {\n            this.loading = true\n            this.$store.dispatch('arrange/saveCalendar', postData).then((data) => {\n              this.resetModifier()\n\n              this.$notify({\n                title: 'Success',\n                message: 'Update Successfully',\n                type: 'success',\n                duration: 2000\n              })\n              this.isEdit = false\n            }).catch(() => {\n              this.loading = false\n            })\n          })\n      } else {\n        this.loading = true\n        this.$store.dispatch('arrange/saveCalendar', postData).then((data) => {\n          this.resetModifier()\n          this.$notify({\n            title: 'Success',\n            message: 'Update Successfully',\n            type: 'success',\n            duration: 2000\n          })\n          this.isEdit = false\n        }).catch(() => {\n          this.loading = false\n        })\n      }\n    },\n\n    getDataListSlot() {\n      this.loading = true\n      const data = {\n        postData: {\n          criteria: {\n            'timetable.semester': {\n              id: this.optionId\n            },\n            subject: {\n              department: this.infoUser.department\n            },\n\n            'timetable': {\n              'temp': false\n            }\n\n          },\n          inCriteria: {\n            room: {\n              name: this.valueRoom\n            },\n            className: {\n              name: this.valueClass\n            },\n            lecturer: {\n              shortName: this.valueTeacher\n            },\n            subject: {\n              code: this.valueSubject\n            }\n          }\n        },\n\n        queryParam: {\n          groupBy: this.groupBy,\n          semesterId: this.optionId\n        }\n      }\n\n      this.$store.dispatch('arrange/getListSlot', data).then((data) => {\n        this.listSlot = this.$store.state.arrange.dataListSlot\n        this.loading = false\n      }).catch(() => {\n        this.loading = false\n      })\n    },\n\n    getDataListRoom() {\n      const data = {\n        params: {\n          semesterId: this.optionId\n        },\n        postData: {}\n      }\n      this.$store.dispatch('arrange/getDataRoom', data).then((data) => {\n        this.dataListRoom = this.$store.state.arrange.dataListRoom\n      }).catch(() => {\n        this.loading = false\n      })\n    },\n\n    getDataListLecturer() {\n      const postData = {\n        postData: {\n          criteria: {\n            'login': true,\n            'status': 0,\n            department: this.infoUser.department\n          }\n        },\n        params: {\n          semesterId: this.optionId\n        }\n      }\n      this.$store.dispatch('arrange/getDataLecturer', postData).then((data) => {\n        this.dataListLecturer = this.$store.state.arrange.dataListLecturer.results\n        this.dataListLecturer.unshift({\n          id: null,\n          shortName: 'NOT_ASSIGN'\n        })\n      }).catch(() => {\n        this.loading = false\n      })\n    },\n\n    getDataListClass() {\n      const data = {\n        params: {\n          semesterId: this.optionId\n        },\n        postData: {}\n      }\n      this.$store.dispatch('arrange/getDataClass', data).then((data) => {\n        this.dataListClass = this.$store.state.arrange.dataListClass\n        // this.$router.push({ path: this.redirect || '/' })\n      }).catch(() => {\n        this.loading = false\n      })\n    },\n\n    // getDataListClassDetail() {\n    //   const data = {\n    //     params: {\n    //       timetableDetailId: this.dataDetail.id\n    //     },\n    //     postData: {\n    //       criteria: {\n    //         status: 0,\n    //         login: true\n    //       }\n    //     }\n    //   }\n    //   this.$store.dispatch('arrange/getDataClassDetail', data).then((data) => {\n    //     this.dataListClassDetail = this.$store.state.arrange.dataListClassDetail\n    //     this.dataListClassDetail.unshift({\n    //       id: null,\n    //       name: 'NOT_ASSIGN'\n    //     })\n    //   }).catch(() => {\n    //     this.loading = false\n    //   })\n    // },\n\n    getDataListTeacherDetail() {\n      const data = {\n        params: {\n          timetableDetailId: this.dataDetail.id\n        },\n        postData: {\n          criteria: {\n            status: 0,\n            login: true\n          }\n        }\n      }\n      this.$store.dispatch('arrange/getDataTeacherDetail', data).then((data) => {\n        this.dataListTeacherDetail = this.$store.state.arrange.dataListTeacherDetail\n        this.dataListTeacherDetail.unshift({\n          id: null,\n          shortName: 'NOT_ASSIGN'\n        })\n      }).catch(() => {\n        this.loading = false\n      })\n    },\n\n    getDataItemArrange(itemSlot) {\n      this.isEdit = true\n      this.dataDetail = itemSlot\n      this.modelRoom = itemSlot.room\n      this.modelLecturer = itemSlot.lecturerShortName\n      this.getListForSwap()\n      this.getListForSwapRoom()\n      this.getDataListTeacherDetail()\n      this.idTimetableSwap = ''\n      // this.getDataListClassDetail()\n    },\n    addConfirm() {\n      this.$confirm('Do you want send request confirm to :<strong> \\'' + this.listTeacherConfirm.map(x => x.shortName) + '\\'</strong> ?', 'Warning', {\n        confirmButtonText: 'Yes',\n        cancelButtonText: 'Cancel',\n        dangerouslyUseHTMLString: true,\n        type: 'warning'\n      })\n        .then(async() => {\n          const data = {\n            params: {\n              semesterId: this.optionId\n            },\n            postData: {\n              abc: this.listTeacherConfirm.map(x => x.id)\n            }\n          }\n          this.$store.dispatch('arrange/addConfirm', data).then(() => {\n            this.resetModifier()\n            this.$notify({\n              title: 'Success',\n              message: 'Request Confirm Successfully',\n              type: 'success',\n              duration: 2000\n            })\n          })\n        })\n    },\n    isDisableConfirm() {\n      const isNotDraft = this.listTeacherConfirm.filter(i => {\n        if (i.timetableStatus !== 'DRAFT') {\n          return true\n        }\n      })\n      if (this.valueTeacher.length === 0 || this.valueTeacher.includes('NOT_ASSIGN') || isNotDraft.length > 0) {\n        return true\n      }\n      return false\n    },\n    getListSlotExpForView() {\n      const paramQuery = {\n        semesterId: this.optionId,\n        groupBy: 'slot'\n\n      }\n      this.$store.dispatch('expected/listExpectedForView', paramQuery).then((data) => {\n        this.listSlotExpectedView = this.$store.state.expected.listExpected\n        this.listSlotExpectedViewTemp = this.$store.state.expected.listExpected\n      })\n    },\n    getListSubjectExpForView() {\n      const paramQuery = {\n        semesterId: this.optionId,\n        groupBy: 'subject'\n\n      }\n      this.$store.dispatch('expected/listExpectedForView', paramQuery).then((data) => {\n        this.listSubjectExpectedView = this.$store.state.expected.listExpected\n        this.listSubjectExpectedViewTemp = this.$store.state.expected.listExpected\n      })\n    },\n    showViewAll() {\n      this.listLecturerExpected = []\n      this.dialogViewAll = true\n      this.listSlotExpectedViewTemp.forEach(element => {\n        this.listLecturerExpected.push(element.lecturerName)\n      })\n    },\n    exportFile(groupBy) {\n      const data = {\n        params: {\n          semesterId: this.optionId,\n          groupBy: groupBy\n        }\n      }\n\n      this.$store.dispatch('request/exportFile', data).then((data) => {\n        this.loading = false\n        const url = window.URL.createObjectURL(new Blob([this.$store.state.request.fileExport]))\n        const link = document.createElement('a')\n        link.href = url\n        const fileName = this.yearSelected[0].season + ' ' + this.yearSelected[0].year + '.xls'\n        link.setAttribute('download', fileName)\n        document.body.appendChild(link)\n        link.click()\n        this.$notify({\n          title: 'Success',\n          message: 'Export file success',\n          type: 'success',\n          duration: 2000\n        })\n      }).catch(() => {\n        this.loading = false\n      })\n    }\n  }\n}\n",null]}